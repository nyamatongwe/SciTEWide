# Define SciTE settings for Lua files.

file.patterns.lua=*.lua;*.yindo

filter.lua=Lua (lua)|*.lua|

lexer.$(file.patterns.lua)=lua

keywordclass.lua=and break do else elseif end false for function global if \
in local nil not or repeat return then true until while
keywords.$(file.patterns.lua)=$(keywordclass.lua)
# Basic Functions
keywords2.$(file.patterns.lua)=_ALERT _ERRORMESSAGE _INPUT _PROMPT _OUTPUT \
_STDERR _STDIN _STDOUT _VERSION assert call collectgarbage dofile dostring \
error foreach foreachi gcinfo getn globals loadfile loadstring newtype print \
rawget rawset require sort tonumber tostring tinsert tremove type unpack
# String Manipulation
keywords3.$(file.patterns.lua)=format gsub \
strbyte strchar strfind strlen strlower strrep strsub strupper
# Mathematical Functions
keywords4.$(file.patterns.lua)=abs acos asin atan atan2 ceil cos deg exp floor log log10 \
max min mod rad sin sqrt tan frexp ldexp random randomseed
# Input and Output Facilities
keywords5.$(file.patterns.lua)=openfile closefile readfrom writeto appendto \
remove rename flush seek tmpfile tmpname read write
# System Facilities
keywords6.$(file.patterns.lua)=clock date difftime execute exit getenv setlocale time

#~ statement.indent.$(file.patterns.lua)=5 do else function then
#~ statement.end.$(file.patterns.lua)=5 end until
#~ statement.lookback.$(file.patterns.lua)=20
indent.maintain.$(file.patterns.lua)=1

comment.block.lua=--~
comment.block.at.line.start.lua=1

# Lua styles

#Default
style.lua.32=$(font.code.base),fore:#000000
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=fore:#FF0000
# Comment -- Not used in Lua
style.lua.1=$(colour.notused),$(font.notused)
# Line comment
style.lua.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(colour.notused),$(font.notused)
# Number
style.lua.4=$(colour.number)
# Keyword
style.lua.5=$(colour.keyword)
# String
style.lua.6=$(colour.string)
# Character
style.lua.7=$(colour.char)
# Literal string
style.lua.8=$(colour.string),$(font.code.comment.box),back:#F0FFFF
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(colour.preproc)
# Operators
style.lua.10=$(colour.operator)
# Identifier (everything else...)
style.lua.11=
# End of line where string is not closed
style.lua.12=back:#E0C0E0,eolfilled
# Other keywords (bozo test colors :-)
style.lua.13=$(style.lua.5),back:#E0FFFF
style.lua.14=$(style.lua.5),back:#E0FFE0
style.lua.15=$(style.lua.5),back:#E0F0E0
style.lua.16=$(style.lua.5),back:#FFE0E0
style.lua.17=$(style.lua.5),back:#FFE0FF
# Nested literal strings
style.lua.18=$(style.lua.8),back:#E0FFFF
style.lua.19=$(style.lua.8),back:#D0FFFF
style.lua.20=$(style.lua.8),back:#C0FFFF
style.lua.21=$(style.lua.8),back:#B0FFFF
style.lua.22=$(style.lua.8),back:#A0FFFF
style.lua.23=$(style.lua.8),back:#90FFFF
style.lua.24=$(style.lua.8),back:#80FFFF
# Braces are only matched in operator style
braces.lua.style=10

command.compile.*.lua=luac -o "$(FileName).luc" "$(FileNameExt)"
command.go.*.lua=lua -c -f "$(FileNameExt)"
