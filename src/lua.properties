# Define SciTE settings for Lua files.

file.patterns.lua=*.lua

filter.lua=Lua (lua)|$(file.patterns.lua)|

lexer.$(file.patterns.lua)=lua

keywordclass.lua=and break do else elseif end for function if \
in local nil not or repeat return then until while
keywords.$(file.patterns.lua)=$(keywordclass.lua)
comment.block.lua=--~

statement.indent.$(file.patterns.lua)=5 repeat do then function else
statement.end.$(file.patterns.lua)=
statement.lookback.$(file.patterns.lua)=20
block.start.$(file.patterns.lua)=5 repeat do then function else
block.end.$(file.patterns.lua)=5 end until else elseif

# Lua styles

# Default
style.lua.32=$(font.code.base),fore:#000000
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=fore:#FF0000
# Comment -- Not used in Lua
style.lua.1=$(colour.notused),$(font.notused)
# Line comment
style.lua.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(colour.notused),$(font.notused)
# Number
style.lua.4=$(colour.number)
# Keyword
style.lua.5=$(colour.keyword),bold
# String
style.lua.6=$(colour.string),$(font.monospace)
# Character
style.lua.7=$(colour.char),$(font.monospace)
# Literal string
style.lua.8=$(colour.string),$(font.monospace)
# Preprocessor
style.lua.9=$(colour.preproc)
# Operators
style.lua.10=$(colour.operator),bold
# Identifier (everything else...)
style.lua.11=
# End of line where string is not closed
style.lua.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Braces are only matched in operator style
braces.lua.style=10

command.compile.*.lua=luac -o $(FileName).luc $(FileNameExt)
command.go.*.lua=lua $(FileNameExt)

