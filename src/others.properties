# Define SciTE settings for other simple files.

filter.properties=Properties (.properties)|*.properties|
filter.text=Text (.txt .ini .inf .log .lst)|*.txt;*.ini;*.inf;*.log;*.lst|
filter.batch=Batch (.bat;.cmd;.nt)|*.bat;*.cmd;*.nt|
filter.diff=Difference (.diff;.patch)|*.diff;*.patch|

file.patterns.props=*.properties;*.ini;*.inf;*.reg
file.patterns.batch=*.bat;*.cmd;*.nt
file.patterns.diff=*.diff;*.patch
file.patterns.make=makefile;makefile_vc;makefile_bor;*.mak

lexer.$(file.patterns.props)=props
lexer.$(file.patterns.batch)=batch
lexer.*.err=errorlist
lexer.$(file.patterns.make)=makefile
lexer.*.iface=makefile
lexer.$(file.patterns.diff)=diff

# Default
style.props.0=
# Comment
style.props.1=fore:#007F7F,$(font.comment)
# Section
style.props.2=fore:#0000FF
# Assignment operator
style.props.3=fore:#0000FF
# Default value
style.props.4=fore:#FF0000
# Matched Operators
style.props.34=fore:#0000FF,notbold
style.props.35=fore:#FF0000,notbold
comment.props=#~

# Batch styles

# List from http://www.easydos.com/dosindex.html
# I limit here the commands to those built in command.com, ie. I don't list external Dos commands
# if [no] (test) (command) -- test is EXIST (filename) | (string1)==(string2) | ERRORLEVEL (number)
# for %%(variable) IN (set) DO (command) -- variable is [a-zA-Z] -- eg for %%X in (*.txt) do type %%X
keywordclass.batch=rem set if exist errorlevel for in do \
break call chcp cd chdir choice cls country ctty date del erase dir echo \
exit goto loadfix loadhigh mkdir md move path pause prompt rename ren \
rmdir rd shift time type ver verify vol \
com con lpt nul
keywords.$(file.patterns.batch)=$(keywordclass.batch)
comment.batch=REM ~

# Default
style.batch.0=fore:#000000
# Comment (rem or ::)
style.batch.1=fore:#007F00,$(font.comment)
# Keywords
style.batch.2=fore:#00007F
# Label (line beginning with ':')
style.batch.3=fore:#7F0000
# Hide command character ('@')
style.batch.4=fore:#8080FF
# External commands
style.batch.5=fore:#0000A0,$(font.monospace),bold
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=back:#E0FFFF
# Operator: * ? < > |
style.batch.7=fore:#FF8000

# Makefile styles

comment.makefile=#~

# Default
style.makefile.0=fore:#000000
# Comment: #
style.makefile.1=fore:#007F7F,$(font.comment)
# Pre-processor or other comment: !
style.makefile.2=fore:#007F7F
# Variable: $(x)
style.makefile.3=back:#E0FFFF
# Operators
style.makefile.4=fore:#D08000
# Error
style.makefile.9=fore:#FF0000,eolfilled
# Matched Operators
style.makefile.34=fore:#0000FF,notbold
style.makefile.35=fore:#FF0000,notbold

# Error list styles

style.errorlist.32=fore:#B06000,$(font.small)
# Default
style.errorlist.0=fore:#000000
# python Error
style.errorlist.1=fore:#FF0000
# gcc Error
style.errorlist.2=fore:#800080
# Microsoft Error
style.errorlist.3=fore:#808000
# command or return status
style.errorlist.4=fore:#0000FF
# Borland error and warning messages
style.errorlist.5=fore:#B06000
# perl error and warning messages
style.errorlist.6=fore:#FF0000

# Difference styles

# Default
style.diff.0=fore:#000000
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=fore:#007F00
# Command (diff ...)
style.diff.2=fore:#7F7F00
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=fore:#7F0000
# Position setting (@@ ...)
style.diff.4=fore:#7F007F
# Line removal (-...)
style.diff.5=fore:#007F7F
# Line addition (+...)
style.diff.6=fore:#00007F

command.build.makefile=make
command.build.*.mak=make

if PLAT_WIN
	command.go.*.bat=$(FileNameExt)
	command.name.1.*.mak=nmake
	command.1.*.mak=nmake -f $(FileNameExt)
