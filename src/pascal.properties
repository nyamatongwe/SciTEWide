# Define SciTE settings for Pascal files.

filter.pascal=Pascal (.pas;.inc)|*.pas;*.inc|

file.patterns.pascal=*.pas;*.inc
lexer.$(file.patterns.pascal)=pascal

keywordclass.pascal=program const type var begin end array set record string if then else \
while for to downto do with repeat until case of goto exit label procedure \
function nil file and or not xor div mod unit uses implementation interface \
external asm inline object constructor destructor virtual far assembler near \
inherited


keywords.$(file.patterns.pascal)=$(keywordclass.pascal)

# Pascal styles
# White space
style.pascal.0=fore:#000000,$(font.pascal)
# Comment
style.pascal.1=fore:#007F00,$(font.comment)
# Line Comment
style.pascal.2=fore:#007F00,$(font.comment)
# Doc comment
style.pascal.3=fore:#7F7F7F
# Number
style.pascal.4=fore:#007F7F


# Keyword
style.pascal.5=fore:#00007F,bold
# Double quoted string
style.pascal.6=fore:#7F007F,italics,$(font.comment)
# Single quoted string
style.pascal.7=fore:#7F007F,italics,$(font.text)
# Symbols 
style.pascal.8=fore:#007F7F
# Preprocessor
style.pascal.9=fore:#7F7F00

fold=1
statement.indent.$(file.patterns.pascal)=5 case catch class default do else for then \
private protected public struct try union while type
statement.end.$(file.patterns.pascal)=10 ;
statement.lookback.$(file.patterns.pascal)=20
block.start.$(file.patterns.pascal)=10 begin
block.end.$(file.patterns.pascal)=10 end
#styling.within.preprocessor=1

#using virtual pascal
pc=C:\Vp21\Bin.w32\Vpc.exe -VC:\Vp21\Bin.w32\Vp.vpo "$(FilePath)"

# compile
command.compile.*.pas=$(pc)

# normal execute
command.go.*.pas="c:\vp21\out.w32\$(FileName).exe"
command.go.subsystem.*.pas=2

#build=compile ...
command.build.*.pas=$(pc)
command.build.subsystem.*.pas=1

