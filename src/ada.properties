# Define SciTE settings for Ada files.

filter.ada=Ada (.ads;.adb)|*.ads;*.adb|

file.patterns.ada=*.ads;*.adb

lexer.$(file.patterns.ada)=ada

keywordclass.ada=abort abs abstract accept access aliased all and array at begin body \
case constant declare delay delta digits do else elsif end entry exception exit \
for function generic goto if in is limited loop mod new not null of or others out \
package pragma private procedure protected raise range record rem renames requeue return reverse \
select separate subtype tagged task terminate then type until use when while with xor

keywords.$(file.patterns.ada)=$(keywordclass.ada)

# Ada styles
# Default
style.ada.0=fore:#000000,$(font.ada)
# Keyword
style.ada.1=fore:#00007F,bold
# Identifier
style.ada.2=
# Bad identifier
style.ada.3=fore:#FF0000
# Number
style.ada.4=fore:#007F7F
# Bad number
style.ada.5=fore:#FF0000
# Delimiter (operator)
style.ada.6=fore:#0000FF
# Character
style.ada.7=fore:#7F007F,$(font.monospace)
# End of line where character is not closed
style.ada.8=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# String
style.ada.9=fore:#7F007F,$(font.monospace)
# End of line where string is not closed
style.ada.10=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Label
style.ada.11=fore:#7F0000,back:#E0C0E0
# Bad label
style.ada.12=fore:#FF0000
# Comment
style.ada.13=fore:#007F00,$(font.comment)

statement.indent.$(file.patterns.ada)=5 begin declare else elsif exception for if is loop while
statement.end.$(file.patterns.ada)=10 ;
statement.lookback.$(file.patterns.ada)=20
block.start.$(file.patterns.ada)=10 then is
block.end.$(file.patterns.ada)=10 end

adagcc=gcc -c $(FileNameExt)

command.compile.*.ads=$(adagcc)
command.build.*.ads=gnatmake
command.go.*.ads=$(FileName)

command.compile.*.adb=$(adagcc)
command.build.*.adb=gnatmake
command.go.*.adb=$(FileName)
