

if PLAT_WIN
	position.left=0
	position.top=0
if PLAT_GTK
	position.left=5
	position.top=22
position.width=576
position.height=740
split.vertical=1

line.numbers=0
margin.width=16
buffered.draw=1
use.palette=0

caret.period=500
view.whitespace=0
view.indentation.whitespace=1
view.indentation.guides=1
highlight.indentation.guides=1
edge.column=200
edge.mode=0
edge.colour=#C0DCC0
braces.check=1
braces.sloppy=1
selection.back=#DADADA

are.you.sure=1
default.file.ext=.cxx

tabsize=8
indent.size=8
use.tabs=1
indent.automatic=1
indent.opening=0
indent.closing=0

fold=1
fold.compact=1
fold.flags=16
fold.symbols=1

if PLAT_WIN
	find.command=fgrep -G -n $(find.what) $(find.files)
if PLAT_GTK
	find.command=grep --line-number "$(find.what)" $(find.files)
find.files=*.c *.cxx *.h

clear.before.execute=0
caret.policy.xslop=1
caret.policy.width=20
caret.policy.xstrict=0
caret.policy.xeven=0
caret.policy.xjumps=0
caret.policy.yslop=1
caret.policy.lines=1
caret.policy.ystrict=1
caret.policy.yeven=1
caret.policy.yjumps=0

statusbar.number=4
statusbar.text.1=\
li=$(LineNumber) co=$(ColumnNumber) $(OverType) ($(EOLMode)) $(FileAttr)
statusbar.text.2=\
$(BufferLength) chars in $(NbOfLines) lines. Sel: $(SelLength) chars.
statusbar.text.3=\
Now is: Date=$(CurrentDate) Time=$(CurrentTime)
statusbar.text.4=\
$(FileNameExt) : $(FileDate) ó $(FileTime) | $(FileAttr)

if PLAT_WIN
	command.scite.help="file://$(SciteDefaultHome)\SciTEDoc.html"
	command.scite.help.subsystem=2
if PLAT_GTK
	command.print.*=a2ps $(FileNameExt)
	command.scite.help=netscape "file://$(SciteDefaultHome)/SciTEDoc.html"

code.page=0

export.html.wysiwyg=1
export.html.styleused=1

chars.alpha=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
chars.numeric=0123456789
chars.accented=äöåúüˇ¿‡¡·¬‚√„ƒ‰≈Â∆Ê«Á»Ë…È ÍÀÎÃÏÕÌŒÓœÔ–—Ò“Ú”Û‘Ù’ı÷ÿ¯Ÿ˘⁄˙€˚‹¸›˝ﬁ˛ﬂˆ

source.files=*.asm;*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;\
*.idl;*.odl;*.rc;*.rc2;*.dlg;*.def;\
*.vb;*.vbs;*.bas;*.frm;*.cls;*.ctl;\
*.java;*.js;*.py;*.pl;*.rb;*.cgi;*.lua;*.conf;\
make*;*.mak;\
*.properties;*.html;*.xml;*.iface;*.bat;*.e

open.filter=\
All Source|$(source.files)|\
All Files (*.*)|*.*|\
$(filter.ada)\
$(filter.conf)\
$(filter.asm)\
$(filter.ave)\
$(filter.baan)\
$(filter.cpp)\
$(filter.css)\
$(filter.eiffel)\
$(filter.fortran)\
$(filter.idl)\
$(filter.java)\
$(filter.js)\
$(filter.lua)\
$(filter.matlab)\
$(filter.nncrontab)\
$(filter.pascal)\
$(filter.perl)\
$(filter.php)\
$(filter.properties)\
$(filter.python)\
$(filter.ruby)\
$(filter.sql)\
$(filter.tcl)\
$(filter.text)\
$(filter.vb)\
$(filter.web)

if PLAT_WIN
	font.base=font:Verdana,size:10
	font.small=font:Verdana,size:8
	font.comment=font:Comic Sans MS,size:9
	font.code.comment.box=$(font.comment)
	font.code.comment.line=$(font.comment)
	font.code.comment.doc=$(font.comment)
	font.text=font:Times New Roman,size:11
	font.text.comment=font:Verdana,size:9
	font.embedded.base=font:Verdana,size:9
	font.embedded.comment=font:Comic Sans MS,size:8
	font.monospace=font:Courier New,size:10
	font.vbs=font:Lucida Sans Unicode,size:10
if PLAT_GTK
	font.base=font:lucidatypewriter,size:12
	font.small=font:lucidatypewriter,size:10
	font.comment=font:new century schoolbook,size:12
	font.code.comment.box=$(font.comment)
	font.code.comment.line=$(font.comment)
	font.code.comment.doc=$(font.comment)
	font.text=font:times,size:14
	font.text.comment=font:lucidatypewriter,size:10
	font.embedded.base=font:lucidatypewriter,size:12
	font.embedded.comment=font:lucidatypewriter,size:12
	font.monospace=font:courier,size:12
	font.vbs=font:new century schoolbook,size:12
font.js=$(font.comment)

colour.code.comment.box=fore:#007F00
colour.code.comment.line=fore:#007F00
colour.code.comment.doc=fore:#3F703F
colour.text.comment=fore:#0000FF,back:#D0F0D0
colour.other.comment=fore:#007F00
colour.embedded.comment=back:#E0EEFF
colour.embedded.js=back:#F0F0FF
colour.notused=back:#FF0000

colour.number=fore:#007F7F
colour.keyword=fore:#00007F
colour.string=fore:#7F007F
colour.char=fore:#7F007F
colour.operator=fore:#000000
colour.preproc=fore:#7F7F00
colour.error=fore:#FFFF00,back:#FF0000

style.*.32=$(font.base)
style.*.33=back:#C0C0C0,$(font.base)
style.*.34=fore:#0000FF,bold
style.*.35=fore:#FF0000,bold
style.*.36=
style.*.37=fore:#C0C0C0,back:#FFFFFF

if PLAT_WIN
	#print.colour.mode=1
	print.magnification=-1
	# Setup: left, right, top, bottom margins, in local units:
	# hundredths of millimeters or thousandths of inches
	print.margins=1500,1000,1000,1500
	# Header/footer:
	# && = &; &p = current page
	# &f = file name; &F = full path
	# &d = file date; &D = current date
	# &t = file time; &T = full time
	print.header.format=$(FileNameExt) ó Printed on $(CurrentDate), $(CurrentTime) ó Page $(CurrentPage)
	print.footer.format=$(FilePath) ó File date: $(FileDate) ó File time: $(FileTime)
	# Header/footer style
	print.header.style=font:Arial,size:12,bold
	print.footer.style=font:Arial Narrow,size:10,italics


menu.language=\
Text|txt|Shift+F11|\
Ada|ads||\
Apache Confi&g|conf||\
Assembler|asm||\
Avenue|ave||\
Baan|bc||\
&Batch|bat||\
Bullant|ant||\
&C / C++|c||\
C&#|cs||\
CSS|css||\
&Difference|diff||\
&Eiffel|e||\
&Errorlist|err||\
&Fortran|f90||\
H&ypertext|html|F12|\
&Java|java||\
Java&Script|js||\
La&TeX|tex||\
Lisp|lisp||\
Lu&a|lua||\
Matlab|m||\
&Makefile|mak|Ctrl+Shift+F11|\
&nnCron crontab|tab||\
Pascal|pas||\
Pe&rl|pl||\
P&HP|php||\
P&LSQL|spec||\
&Properties|properties||\
Pytho&n|py||\
Reso&urce|rc||\
Ruby|rb||\
Shell|sh||\
S&QL|sql||\
&TCL|tcl||\
&VB|vb||\
VBScr&ipt|vbs||\
&XML|xml|Shift+F12|


import ada
import asm
import ave
import baan
import bullant
import conf
import cpp
import css
import eiffel
import fortran
import html
import latex
import lisp
import lua
import matlab
import nncrontab
import others
import pascal
import perl
import python
import ruby
import sql
import tcl
import vb


main=int main(int argc, char *argv[]) {\n|\n}
i=if (|) {\n\n}

filter.ada=Ada (ads adb)|*.ads;*.adb|

file.patterns.ada=*.ads;*.adb

lexer.$(file.patterns.ada)=ada


keywordclass.ada.main=abort abstract accept access aliased all array at begin body \
case constant declare delay delta digits do else elsif end entry exception exit for \
function generic goto if in is limited loop new null of others out package pragma \
private procedure protected raise range record renames requeue return reverse \
select separate subtype tagged task terminate then type until use when while with
keywordclass.ada.operators=abs and mod not or rem xor

keywordclass.ada=$(keywordclass.ada.main) $(keywordclass.ada.operators)

keywords.$(file.patterns.ada)=$(keywordclass.ada)

style.ada.0=fore:#808080
style.ada.1=$(colour.keyword),bold
style.ada.2=
style.ada.3=$(colour.number)
style.ada.4=$(colour.operator),bold
style.ada.5=$(colour.char)
style.ada.6=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.ada.7=$(colour.string)
style.ada.8=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.ada.9=fore:#7F0000
style.ada.10=$(colour.code.comment.line),$(font.code.comment.line)
style.ada.11=fore:#FF000

comment.block.ada=--~

braces.ada.style=4

statement.indent.$(file.patterns.ada)=5 begin declare else elsif exception for if is loop while
statement.end.$(file.patterns.ada)=10 ;
statement.lookback.$(file.patterns.ada)=20
block.start.$(file.patterns.ada)=10 then is
block.end.$(file.patterns.ada)=10 end

calltip.ada.word.characters=._$(chars.alpha)

adagcc=gcc -c $(FileNameExt)

command.compile.*.ads=$(adagcc)
command.build.*.ads=gnatmake
command.go.*.ads=$(FileName)

command.compile.*.adb=$(adagcc)
command.build.*.adb=gnatmake
command.go.*.adb=$(FileName)

file.patterns.asm=*.asm
filter.asm=Assembler (asm)|$(file.patterns.asm)|

lexer.$(file.patterns.asm)=asm


cpu_instruction=aaa aad aam aas adc add and call cbw \
	clc cld cli cmc cmp cmps cmpsb cmpsw cwd daa das dec div esc hlt \
	idiv imul in inc int into iret ja jae jb jbe jc jcxz je jg jge jl \
	jle jmp jna jnae jnb jnbe jnc jne jng jnge jnl jnle jno jnp jns \
	jnz jo jp jpe jpo js jz lahf lds lea les lods lodsb lodsw loop \
	loope loopew loopne loopnew loopnz loopnzw loopw loopz loopzw \
	mov movs movsb movsw mul neg nop not or out pop popf push pushf \
	rcl rcr ret retf retn rol ror sahf sal sar sbb scas scasb scasw \
	shl shr stc std sti stos stosb stosw sub test wait xchg xlat \
	xlatb xor \
	bound enter ins insb insw leave outs outsb outsw popa pusha pushw \
	arpl lar lsl sgdt sidt sldt smsw str verr verw clts lgdt lidt lldt lmsw ltr \
	bsf bsr bt btc btr bts cdq cmpsd cwde insd iretd iretdf  iretf \
	jecxz lfs lgs lodsd loopd  looped  loopned  loopnzd  loopzd  lss \
	movsd movsx movzx outsd popad popfd pushad pushd  pushfd scasd seta \
	setae setb setbe setc sete setg setge setl setle setna setnae setnb \
	setnbe setnc setne setng setnge setnl setnle setno setnp setns \
	setnz seto setp setpe setpo sets setz shld shrd stosd \
	bswap cmpxchg invd  invlpg  wbinvd  xadd \
	lock rep repe repne repnz repz

fpu_instruction=f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcom fcomp fcompp fdecstp \
	fdisi fdiv fdivp fdivr fdivrp feni ffree fiadd ficom ficomp fidiv \
	fidivr fild fimul fincstp finit fist fistp fisub fisubr fld fld1 \
	fldcw fldenv fldenvw fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul \
	fmulp fnclex fndisi fneni fninit fnop fnsave fnsavew fnstcw fnstenv \
	fnstenvw fnstsw fpatan fprem fptan frndint frstor frstorw fsave \
	fsavew fscale fsqrt fst fstcw fstenv fstenvw fstp fstsw fsub fsubp \
	fsubr fsubrp ftst fwait fxam fxch fxtract fyl2x fyl2xp1 \
	fsetpm fcos fldenvd fnsaved fnstenvd fprem1 frstord fsaved fsin fsincos \
	fstenvd fucom fucomp fucompp

register=ah al ax bh bl bp bx ch cl cr0 cr2 cr3 cs \
	cx dh di dl dr0 dr1 dr2 dr3 dr6 dr7 ds dx eax ebp ebx ecx edi edx \
	es esi esp fs gs si sp ss st tr3 tr4 tr5 tr6 tr7

directive=.186 .286 .286c .286p .287 .386 .386c .386p .387 .486 .486p \
	.8086 .8087 .alpha .break .code .const .continue .cref .data .data?  \
	.dosseg .else .elseif .endif .endw .err .err1 .err2 .errb \
	.errdef .errdif .errdifi .erre .erridn .erridni .errnb .errndef \
	.errnz .exit .fardata .fardata? .if .lall .lfcond .list .listall \
	.listif .listmacro .listmacroall  .model .no87 .nocref .nolist \
	.nolistif .nolistmacro .radix .repeat .sall .seq .sfcond .stack \
	.startup .tfcond .type .until .untilcxz .while .xall .xcref \
	.xlist alias align assume catstr comm comment db dd df dosseg dq \
	dt dup dw echo else elseif elseif1 elseif2 elseifb elseifdef elseifdif \
	elseifdifi elseife elseifidn elseifidni elseifnb elseifndef end \
	endif endm endp ends eq  equ even exitm extern externdef extrn for \
	forc ge goto group gt high highword if if1 if2 ifb ifdef ifdif \
	ifdifi ife  ifidn ifidni ifnb ifndef include includelib instr invoke \
	irp irpc label le length lengthof local low lowword lroffset \
	lt macro mask mod .msfloat name ne offset opattr option org %out \
	page popcontext proc proto ptr public purge pushcontext record \
	repeat rept seg segment short size sizeof sizestr struc struct \
	substr subtitle subttl textequ this title type typedef union while width

directive_operand=$ ? @b @f addr basic byte c carry? dword \
	far far16 fortran fword near near16 overflow? parity? pascal qword  \
	real4  real8 real10 sbyte sdword sign? stdcall sword syscall tbyte \
	vararg word zero? flat near32 far32 \
	abs all assumes at casemap common compact \
	cpu dotname emulator epilogue error export expr16 expr32 farstack flat \
	forceframe huge language large listing ljmp loadds m510 medium memory \
	nearstack nodotname noemulator nokeyword noljmp nom510 none nonunique \
	nooldmacros nooldstructs noreadonly noscoped nosignextend nothing \
	notpublic oldmacros oldstructs os_dos para private prologue radix \
	readonly req scoped setif2 smallstack tiny use16 use32 uses

keywords.$(file.patterns.asm)=$(cpu_instruction)
keywords2.$(file.patterns.asm)=$(fpu_instruction)
keywords3.$(file.patterns.asm)=$(register)
keywords4.$(file.patterns.asm)=$(directive)
keywords5.$(file.patterns.asm)=$(directive_operand)


comment.block.asm=;


style.asm.32=fore:#808080,font:Verdana,size:8
style.asm.0=
style.asm.1=fore:#adadad
style.asm.2=fore:#ff0000
style.asm.3=$(colour.string)
style.asm.4=$(colour.operator),bold
style.asm.5=
style.asm.6=$(colour.keyword),bold
style.asm.7=fore:#0000ff
style.asm.8=fore:#46aa03,bold
style.asm.9=fore:#0000ff
style.asm.10=fore:#0000ff

command.compile.$(file.patterns.asm)=masm $(FileNameExt)

command.name.0.*.asm=Link
command.0.*.asm=link $(FileName)


statement.indent.$(file.patterns.asm)=9 .if
statement.end.$(file.patterns.asm)=9 .endif

filter.ave=AVE (ave)|*.ave|


file.patterns.ave=*.ave

lexer.*.ave=ave
lexer.$(file.patterns.ave)=ave


keywords.$(file.patterns.ave)=nil true false else for if while then elseif end av self in exit
word.chars.ave=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ave)=$(word.chars.ave)

statement.indent.$(file.patterns.ave)=1 else for if while then
statement.end.$(file.patterns.ave)=1 end
statement.lookback.$(file.patterns.ave)=1 end



comment.block.ave='--

comment.box.start.ave='--
comment.box.middle.ave='--
comment.box.end.ave='--
autocomplete.ave.ignorecase=1
calltip.ave.ignorecase=1
autocomplete.ave.start.characters=.
calltip.ave.word.characters=.$(word.chars.ave)

style.ave.32=$(font.code.base),fore:#000000
style.ave.0=fore:#FF0000
style.ave.1=$(colour.code.comment.line),$(font.code.comment.line)
style.ave.2=$(colour.number),bold
style.ave.3=$(colour.keyword),bold
style.ave.6=$(colour.string)
style.ave.7=$(colour.preproc),bold
style.ave.8=back:#E0C0E0,eolfilled
style.ave.10=$(colour.operator)
style.ave.9=$(font.code.base),fore:#000000
style.ave.12=$(font.code.base),fore:#003355,bold
style.ave.13=$(font.code.base),fore:#005533,bold
style.ave.14=$(colour.keyword)
style.ave.15=$(colour.keyword)
style.ave.16=$(colour.keyword)
braces.ave.style=10


avenue=ave "$(FilePath)"
avenueGo=avego "$(FilePath)"
avenueBuild=avebuild "$(FilePath)"





file.patterns.baan=*.bc;*.cln

filter.baan=Baan (baan)|$(file.patterns.baan)|

lexer.$(file.patterns.baan)=baan

word.characters.$(file.patterns.baan)=$(chars.alpha)$(chars.numeric)_#.$
calltip.baan.word.characters="._0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$"
autocomplete.baan.ignorecase=1
calltip.baan.ignorecase=1

preprocessor.symbol.$(file.patterns.baan)=#
preprocessor.start.$(file.patterns.baan)=if ifdef ifndef
preprocessor.middle.$(file.patterns.baan)=else elif
preprocessor.end.$(file.patterns.baan)=endif

keywordclass.baan=
keywords.$(file.patterns.baan)=$(keywordclass.baan)

comment.block.baan=|
comment.box.start.baan=|
comment.box.middle.baan=|
comment.box.end.baan=|
comment.stream.start.baan=DllUsage
comment.stream.end.baan=EndDllUsage



colour.baan.operator=fore:#B06000

style.baan.32=$(font.monospace)
style.baan.0=fore:#808080,$(font.monospace)
style.baan.1=$(colour.code.comment.line),$(font.monospace)
style.baan.2=fore:#007F7F,$(font.comment)
style.baan.3=$(colour.number),$(font.monospace)
style.baan.4=$(colour.keyword),bold,$(font.monospace)
style.baan.5=$(colour.string),$(font.monospace)
style.baan.6=$(colour.preproc),$(font.monospace)
style.baan.7=$(colour.operator),bold,$(font.monospace)
style.baan.8=$(font.monospace)
style.baan.9=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.baan.10=fore:#B00040,$(font.monospace)
braces.baan.style=10

statement.indent.$(file.patterns.baan)=5 after.choice  after.commit.transaction  after.delete  \
after.display  after.field  \
after.form  after.input  after.program  after.read  after.rewrite  \
after.group  after.skip.delete  after.skip.rewrite  after.skip.write  \
after.update.db.commit  after.write  after.zoom  \
before.checks  before.choice  before.delete  before.display  \
before.display.object  before.field  before.form  before.input  before.layout  \
before.group before.program  before.read  before.rewrite  before.write  before.zoom  \
case check.input  declaration  default  dllusage  \
else  elseif  functions  if  on.input  on.entry  on.exit \
read.view  ref.input  ref.display selectdo  selectempty  selecteos \
when.field.changes  while

statement.end.$(file.patterns.baan)=1 endif endwhile endfor endselect return
statement.lookback.$(file.patterns.baan)=1 endif endwhile endfor endselect return
filter.bullant=Bullant (.ant)|*.ant|

file.patterns.bullant=*.ant

lexer.$(file.patterns.bullant)=bullant

keywordclass.bullant=abstract all ancestor and application \
assert attributes author \
begin \
callback class concrete config constants construct continue \
depends description downcast driver \
elif else ensures error exception exposure extension \
false fatal final function \
generics glyph \
help hidden host \
immutable in inherits is \
kernel \
label leave library locals \
mutable \
none not null \
obsolete options or other \
parameters peer private public \
raise reason restricted retry return \
returns rollback route \
security self settings severity step \
task test transaction true \
unknown \
varying \
warning when \
method end if until while trap case debug for foreach lock \
boolean \
character character$ \
date date$ datetime datetime$ \
float \
hex$ \
identifier identifier$ integer interval interval$ \
money money$ \
raw raw$ \
string \
tick tick$ time time$ \
version version$


keywords.$(file.patterns.bullant)=$(keywordclass.bullant)

style.bullant.0=fore:#000000,$(font.monospace)
style.bullant.1=fore:#007F00,$(font.monospace)
style.bullant.2=fore:#007F00,$(font.monospace)
style.bullant.3=fore:#7F7F7F
style.bullant.4=fore:#007F7F


style.bullant.5=fore:#00007F,bold
style.bullant.6=fore:#7F007F,$(font.monospace)
style.bullant.7=fore:#7F007F,$(font.monospace)
style.bullant.8=fore:#007F7F
style.bullant.9=fore:#7F7F00

command.compile.*.ant=

command.go.*.ant=
command.go.subsystem.*.ant=

command.build.*.ant=
command.build.subsystem.*.ant=


filter.conf=Apache Conf (conf)|*.conf|
file.patterns.conf=*.conf
lexer.$(file.patterns.conf)=conf

keywords.$(file.patterns.conf)=\
accessconfig accessfilename action addalt \
addaltbyencoding addaltbytype addcharset \
adddefaultcharset adddescription \
addencoding addhandler addicon addiconbyencoding \
addiconbytype addlanguage addmodule addmoduleinfo \
addtype agentlog alias aliasmatch \
allow allowconnect allowoverride anonymous \
anonymous_authoritative anonymous_logemail anonymous_mustgiveemail \
anonymous_nouserid anonymous_verifyemail authauthoritative \
authdbauthoritative authdbgroupfile authdbmauthoritative \
authdbmgroupfile authdbmgroupfile authdbuserfile authdbmuserfile \
authdigestfile authgroupfile authname authtype \
authuserfile bindaddress browsermatch browsermatchnocase \
bs2000account cachedefaultexpire cachedirlength cachedirlevels \
cacheforcecompletion cachegcinterval cachelastmodifiedfactor cachemaxexpire \
cachenegotiateddocs cacheroot cachesize checkspelling \
clearmodulelist contentdigest cookieexpires cookielog \
cookielog cookietracking coredumpdirectory customlog \
defaulticon defaultlanguage defaulttype define \
deny directory directorymatch directoryindex \
documentroot errordocument errorlog example \
expiresactive expiresbytype expiresdefault extendedstatus \
fancyindexing files filesmatch forcetype \
group header headername hostnamelookups \
identitycheck ifdefine ifmodule imapbase \
imapdefault imapmenu include indexignore \
indexoptions keepalive keepalivetimeout languagepriority \
limit limitexcept limitrequestbody limitrequestfields \
limitrequestfieldsize limitrequestline listen listenbacklog \
loadfile loadmodule location locationmatch \
lockfile logformat loglevel maxclients \
maxkeepaliverequests maxrequestsperchild maxspareservers metadir \
metafiles metasuffix mimemagicfile minspareservers \
mmapfile namevirtualhost nocache options order \
passenv pidfile port proxyblock proxydomain \
proxypass proxypassreverse proxyreceivebuffersize proxyremote \
proxyrequests proxyvia qsc readmename \
redirect redirectmatch redirectpermanent redirecttemp \
refererignore refererlog removehandler require \
resourceconfig rewritebase rewritecond rewriteengine \
rewritelock rewritelog rewriteloglevel rewritemap \
rewriteoptions rewriterule rlimitcpu rlimitmem \
rlimitnproc satisfy scoreboardfile script \
scriptalias scriptaliasmatch scriptinterpretersource scriptlog \
scriptlogbuffer scriptloglength sendbuffersize \
serveradmin serveralias servername serverpath \
serverroot serversignature servertokens servertype \
setenv setenvif setenvifnocase sethandler \
singlelisten startservers threadsperchild timeout \
transferlog typesconfig unsetenv usecanonicalname \
user userdir virtualhost virtualdocumentroot \
virtualdocumentrootip virtualscriptalias virtualscriptaliasip \
xbithack from all


keywords2.$(file.patterns.conf)=\
on off standalone inetd \
force-response-1.0 downgrade-1.0 nokeepalive \
indexes includes followsymlinks none \
x-compress x-gzip

style.conf.0=fore:#808080,$(font.base)
style.conf.1=fore:#007F00,$(font.comment)
style.conf.2=fore:#007F7F
style.conf.9=fore:#00007F,bold
style.conf.4=fore:#000000,back:#FFE0FF
style.conf.5=fore:#000000,back:#FFE0FF
style.conf.6=fore:#7F007F,$(font.monospace)
style.conf.7=bold
style.conf.8=fore:#007F7F,bold
style.conf.3=fore:#000000,back:#A0FFA0

command.compile.$(file.patterns.conf)=httpd -t -f $(FilePath)
command.build.$(file.patterns.conf)=httpd -t -f $(FilePath)





file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hpp;*.hxx;*.sma
file.patterns.test=*.pln;*.inc;*.t
file.patterns.cs=*.cs
file.patterns.rc=*.rc;*.rc2;*.dlg
file.patterns.idl=*.idl;*.odl
file.patterns.c.like=$(file.patterns.cpp);$(file.patterns.cs);$(file.patterns.idl);*.java

filter.cpp=C/C++ (c cc cpp cxx cs h hh hxx hpp dlg rc rc2 mak)|\
$(file.patterns.cpp);$(file.patterns.rc);*.mak;make*|
filter.java=Java (java)|*.java|
filter.js=JavaScript (js)|*.js|
filter.idl=IDL (idl odl)|$(file.patterns.idl)|
filter.test=SilkTest (pln inc t)|$(file.patterns.test)|

file.patterns.braces=$(file.patterns.cpp);$(file.patterns.idl);*.java;$(file.patterns.cs);$(file.patterns.test)

lexer.*.java=cpp
lexer.$(file.patterns.cpp)=cpp
lexer.$(file.patterns.rc)=cpp
lexer.$(file.patterns.idl)=cpp
lexer.$(file.patterns.cs)=cpp
lexer.*.js=cpp
lexer.$(file.patterns.test)=cpp

keywordclass.cpp=asm auto bool break case catch char class const const_cast continue \
default delete do double dynamic_cast else enum explicit export extern false float for \
friend goto if inline int long mutable namespace new operator private protected public \
register reinterpret_cast return short signed sizeof static static_cast struct switch \
template this throw true try typedef typeid typename union unsigned using \
virtual void volatile wchar_t while
keywords.$(file.patterns.cpp)=$(keywordclass.cpp)
keywords3.$(file.patterns.cpp)=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception \
f$ f[ f] file fn hideinitializer htmlinclude htmlonly \
if image include ingroup internal invariant interface latexonly li line link \
mainpage name namespace nosubgrouping note overload \
p page par param post pre ref relates remarks return retval \
sa section see showinitializer since skip skipline struct subsection \
test throw todo typedef union until \
var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }

word.chars.cxx=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.cpp)=$(word.chars.cxx)
comment.block.cpp=//~
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */
fold.comment=1
fold.preprocessor=1

statement.indent.$(file.patterns.c.like)=5 case catch class default do else for if \
private protected public struct try union while
statement.end.$(file.patterns.c.like)=10 ;
statement.lookback.$(file.patterns.c.like)=20
block.start.$(file.patterns.c.like)=10 {
block.end.$(file.patterns.c.like)=10 }


preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

keywordclass.cs=abstract as base bool break byte case catch char checked class \
const continue decimal default delegate do double else enum \
event explicit extern false finally fixed float for foreach goto if \
implicit in int interface internal is lock long namespace new null \
object operator out override params private protected public \
readonly ref return sbyte sealed short sizeof stackalloc static \
string struct switch this throw true try typeof uint ulong \
unchecked unsafe ushort using virtual void while
keywords.$(file.patterns.cs)=$(keywordclass.cs)
word.characters.$(file.patterns.cs)=$(word.chars.cxx)

keywordclass.rc=\
ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON \
BEGIN BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS \
COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX DISCARDABLE \
EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT \
MENU MENUEX MENUITEM MESSAGETABLE POPUP \
PUSHBUTTON RADIOBUTTON RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 \
STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO VIRTKEY
keywords.$(file.patterns.rc)=$(keywordclass.rc)

keywordclass.idl=\
aggregatable allocate appobject arrays async async_uuid \
auto_handle \
bindable boolean broadcast byte byte_count \
call_as callback char coclass code comm_status \
const context_handle context_handle_noserialize \
context_handle_serialize control cpp_quote custom \
decode default defaultbind defaultcollelem \
defaultvalue defaultvtable dispinterface displaybind dllname \
double dual \
enable_allocate encode endpoint entry enum error_status_t \
explicit_handle \
fault_status first_is float \
handle_t heap helpcontext helpfile helpstring \
helpstringcontext helpstringdll hidden hyper \
id idempotent ignore iid_as iid_is immediatebind implicit_handle \
import importlib in include in_line int __int64 __int3264 interface \
last_is lcid length_is library licensed local long \
max_is maybe message methods midl_pragma \
midl_user_allocate midl_user_free min_is module ms_union \
ncacn_at_dsp ncacn_dnet_nsp ncacn_http ncacn_ip_tcp \
ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np \
ncacn_spx ncacn_vns_spp ncadg_ip_udp ncadg_ipx ncadg_mq \
ncalrpc nocode nonbrowsable noncreatable nonextensible notify \
object odl oleautomation optimize optional out out_of_line \
pipe pointer_default pragma properties propget propput propputref \
ptr public \
range readonly ref represent_as requestedit restricted retval \
shape short signed size_is small source strict_context_handle \
string struct switch switch_is switch_type \
transmit_as typedef \
uidefault union unique unsigned user_marshal usesgetlasterror uuid \
v1_enum vararg version void wchar_t wire_marshal

keywordclass.msidl=handle
keywordclass.xpidl=attribute native noscript scriptable shared wstring inout
keywords.$(file.patterns.idl)=$(keywordclass.idl) $(keywordclass.xpidl)

keywordclass.java=abstract assert boolean break byte case catch char class const \
continue default do double else extends final finally float for future \
generic goto if implements import inner instanceof int interface long \
native new null operator outer package private protected public rest \
return short static super switch synchronized this throw throws \
transient try var void volatile while
keywords.*.java=$(keywordclass.java)

keywordclass.javascript=abstract boolean break byte case catch char class \
const continue debugger default delete do double else enum export extends \
final finally float for function goto if implements import in instanceof \
int interface long native new package private protected public \
return short static super switch synchronized this throw throws \
transient try typeof var void volatile while with
keywords.*.js=$(keywordclass.javascript)


style.cpp.32=$(font.base)
style.cpp.0=fore:#808080
style.cpp.1=$(colour.code.comment.box),$(font.code.comment.box)
style.cpp.2=$(colour.code.comment.line),$(font.code.comment.line)
style.cpp.3=$(colour.code.comment.doc),$(font.code.comment.doc)
style.cpp.4=$(colour.number)
style.cpp.5=$(colour.keyword),bold
style.cpp.6=$(colour.string)
style.cpp.7=$(colour.char)
style.cpp.8=fore:#804080
style.cpp.9=$(colour.preproc)
style.cpp.10=$(colour.operator),bold
style.cpp.11=
style.cpp.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.cpp.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
style.cpp.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
style.cpp.15=$(colour.code.comment.doc),$(font.code.comment.doc)
style.cpp.16=fore:#B00040
style.cpp.17=fore:#3060A0,$(font.code.comment.doc)
style.cpp.18=fore:#804020,$(font.code.comment.doc)
braces.cpp.style=10

cc=g++ -pedantic -Os -fno-exceptions -fvtable-thunks -c $(FileNameExt) -o $(FileName).o

command.compile.*.c=$(cc)
command.build.*.c=make
command.go.*.c=$(FileName)

command.compile.*.cc=$(cc)
command.build.*.cc=make
command.go.*.cc=$(FileName)

command.compile.*.cpp=$(cc)
command.build.*.cpp=make
command.go.*.cpp=$(FileName)

command.compile.*.cxx=$(cc)
command.build.*.cxx=make
command.go.*.cxx=$(FileName)

command.build.*.h=make

command.name.0.*.cxx=Indent
command.0.*.cxx=astyle -tapO $(FileNameExt)
command.is.filter.0.*.cxx=1

command.name.1.*.cxx=Lint
command.1.*.cxx=g++ -W -Wall -Wshadow -Wwrite-strings -Wold-style-cast \
	-Woverloaded-virtual  -pedantic -Os -fno-exceptions -fvtable-thunks -c $(FileNameExt)

command.name.2.*.cxx=Execute Selection
command.2.*.cxx=$(CurrentSelection)

if PLAT_WIN
	command.compile.*.rc=windres $(FileNameExt) $(FileName).o
	command.build.*.rc=make
	command.help.$(file.patterns.cpp)=$(CurrentWord)!G:\Program Files\Microsoft Visual Studio\MSDN98\98VSa\1033\MSDNVS6A.COL
	command.help.subsystem.$(file.patterns.cpp)=4
	command.go.*.js=cscript /nologo $(FileNameExt)

if PLAT_GTK
	command.help.$(file.patterns.cpp)=man $(CurrentWord) | col -b
	
if PLAT_WIN
	command.build.*.cs=csc /t:winexe $(FileNameExt) /r:system.dll,system.drawing.dll
	command.go.*.cs=$(FileName)
	command.go.subsystem.*.cs=1

command.compile.*.java=javac $(FileNameExt)
command.build.*.java=javac *.java
command.go.*.java=java $(FileName)


filter.css=CSS (css)|*.css|
lexer.*.css=css

keywordclass.css=\
font-family font-style font-variant font-weight font-size font \
color background-color background-image background-repeat background-attachment background-position background \
word-spacing letter-spacing text-decoration vertical-align text-transform text-align text-indent line-height \
margin-top margin-right margin-bottom margin-left margin \
padding-top padding-right padding-bottom padding-left padding \
border-top-width border-right-width border-bottom-width border-left-width border-width \
border-top border-right border-bottom border-left border \
border-color border-style width height float clear \
display white-space list-style-type list-style-image list-style-position list-style

keywords.*.css=$(keywordclass.css)

keywordclass.css2=first-letter first-line active link visited
keywords2.*.css=$(keywordclass.css2)

word.characters.*.css=$(chars.alpha)$(chars.numeric)_-

style.css.0=fore:#000033,eolfilled
style.css.1=fore:#800000,bold
style.css.2=fore:#800000
style.css.3=fore:#800000
style.css.4=fore:#FF0000
style.css.5=fore:#000080,bold
style.css.6=fore:#000000
style.css.7=fore:#FF0000
style.css.8=fore:#800080
style.css.9=fore:#007F00,$(font.comment)
style.css.10=fore:#800000
style.css.11=fore:#0000FF
style.css.12=fore:#008000,bold

block.start.*.css=5 {
block.end.*.css=5 }

command.help.*.css="http://www.w3.org/TR/REC-CSS1#$(CurrentWord)"
command.help.subsystem.*.css=2

filter.eiffel=Eiffel (e)|*.e|

file.patterns.eiffel=*.e

lexer.$(file.patterns.eiffel)=eiffel

keywordclass.eiffel=\
alias all and any as bit boolean \
check class character clone create creation current \
debug deferred div do double \
else elseif end ensure equal expanded export external \
false feature forget from frozen general \
if implies indexing infix inherit inspect integer invariant is \
language like local loop mod name nochange none not \
obsolete old once or platform pointer prefix precursor \
real redefine rename require rescue result retry \
select separate string strip then true undefine unique until \
variant void when xor

keywords.$(file.patterns.eiffel)=$(keywordclass.eiffel)

style.eiffel.0=fore:#808080
style.eiffelkw.0=$(style.eiffel.0)
style.eiffel.1=$(colour.code.comment.line),$(font.code.comment.line)
style.eiffelkw.1=$(style.eiffel.1)
style.eiffel.2=$(colour.number)
style.eiffelkw.2=$(style.eiffel.2)
style.eiffel.3=$(colour.keyword),bold
style.eiffelkw.3=$(style.eiffel.3)
style.eiffel.4=$(colour.string),$(font.monospace)
style.eiffelkw.4=$(style.eiffel.4)
style.eiffel.5=$(colour.char),$(font.monospace)
style.eiffelkw.5=$(style.eiffel.5)
style.eiffel.6=$(colour.operator),bold
style.eiffelkw.6=$(style.eiffel.6)
style.eiffel.7=
style.eiffelkw.7=$(style.eiffel.7)
style.eiffel.8=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.eiffelkw.8=$(style.eiffel.8)
braces.eiffel.style=6
braces.eiffelkw.style=$(braces.eiffel.style)

statement.indent.$(file.patterns.eiffel)=5 do else elsif rescue if is loop
statement.end.$(file.patterns.eiffel)=10 ;
statement.lookback.$(file.patterns.eiffel)=20
block.start.$(file.patterns.eiffel)=10 check debug deferred do from if inspect once
block.end.$(file.patterns.eiffel)=10 end

command.compile.*.e=compile $(FileName)
filter.fortran=Fortran (f for f90 f95)|*.f;*.for;*.f90;*.f95|

file.patterns.f95=*.f90;*.f95
file.patterns.f77=*.f;*.for
file.patterns.fortran=$(file.patterns.f95);$(file.patterns.f77)

lexer.$(file.patterns.f95)=fortran
lexer.$(file.patterns.f77)=f77

keywordclass.fortran=allocatable allocate assignment backspace block \
blockdata call case character close common complex contains continue \
cycle data deallocate default dimension direct do double doubleprecision \
elemental else elseif elsewhere end endblock endblockdata enddo endfile \
endforall endfunction endif endinterface endmodule endprogram endselect \
endsubroutine endtype endwhere entry equivalence err exist exit external forall \
format formatted function go goto if implicit in inout include \
inquire integer intent interface intrinsic iolength iostat kind \
len logical module namelist none null nullify only open operator optional \
parameter pointer position precision print private procedure program public pure \
out read readwrite real rec recursive result return rewind save select selectcase \
sequence sequential stat status\
stop subroutine target then to type unformatted unit use where while write

keywords.$(file.patterns.f95)=$(keywordclass.fortran)
keywords.$(file.patterns.f77)=$(keywordclass.fortran)

keywords2.$(file.patterns.fortran)=abs achar acos acosd adjustl adjustr \
aimag aimax0 aimin0 aint ajmax0 ajmin0 akmax0 akmin0 all allocated alog \
alog10 amax0 amax1 amin0 amin1 amod anint any asin asind associated \
atan atan2 atan2d atand bitest bitl bitlr bitrl bjtest bit_size bktest break \
btest cabs ccos cdabs cdcos cdexp cdlog cdsin cdsqrt ceiling cexp char \
clog cmplx conjg cos cosd cosh count cpu_time cshift csin csqrt dabs \
dacos dacosd dasin dasind datan datan2 datan2d datand date \
date_and_time dble dcmplx dconjg dcos dcosd dcosh dcotan ddim dexp \
dfloat dflotk dfloti dflotj digits dim dimag dint dlog dlog10 dmax1 dmin1 \
dmod dnint dot_product dprod dreal dsign dsin dsind dsinh dsqrt dtan dtand \
dtanh eoshift epsilon errsns exp exponent float floati floatj floatk floor fraction \
free huge iabs iachar iand ibclr ibits ibset ichar idate idim idint idnint ieor ifix \
iiabs iiand iibclr iibits iibset iidim iidint iidnnt iieor iifix iint iior iiqint iiqnnt iishft \
iishftc iisign ilen imax0 imax1 imin0 imin1 imod index inint inot int int1 int2 int4 \
int8 iqint iqnint ior ishft ishftc isign isnan izext jiand jibclr jibits jibset jidim jidint \
jidnnt jieor jifix jint jior jiqint jiqnnt jishft jishftc jisign jmax0 jmax1 jmin0 jmin1 \
jmod jnint jnot jzext kiabs kiand kibclr kibits kibset kidim kidint kidnnt kieor kifix \
kind kint kior kishft kishftc kisign kmax0 kmax1 kmin0 kmin1 kmod knint knot kzext \
lbound leadz len len_trim lenlge lge lgt lle llt log log10 logical lshift malloc matmul \
max max0 max1 maxexponent maxloc maxval merge min min0 min1 minexponent minloc \
minval mod modulo mvbits nearest nint not nworkers number_of_processors pack popcnt \
poppar precision present product radix random random_number random_seed range real \
repeat reshape rrspacing rshift scale scan secnds selected_int_kind \
selected_real_kind set_exponent shape sign sin sind sinh size sizeof sngl snglq spacing \
spread sqrt sum system_clock tan tand tanh tiny transfer transpose trim ubound unpack verify

keywords3.$(file.patterns.fortran)=cdabs cdcos cdexp cdlog cdsin cdsqrt cotan cotand \
dcmplx dconjg dcotan dcotand decode dimag dll_export dll_import doublecomplex dreal \
dvchk encode find flen flush getarg getcharqq getcl getdat getenv gettim hfix ibchng \
identifier imag int1 int2 int4 intc intrup invalop iostat_msg isha ishc ishl jfix \
lacfar locking locnear map nargs nbreak ndperr ndpexc offset ovefl peekcharqq precfill \
prompt qabs qacos qacosd qasin qasind qatan qatand qatan2 qcmplx qconjg qcos qcosd \
qcosh qdim qexp qext qextd qfloat qimag qlog qlog10 qmax1 qmin1 qmod qreal qsign qsin \
qsind qsinh qsqrt qtan qtand qtanh ran rand randu rewrite segment setdat settim system \
timer undfl unlock union val virtual volatile zabs zcos zexp zlog zsin zsqrt


comment.block.fortran=!~

statement.indent.$(file.patterns.fortran)=5 associate block blockdata case do enum forall \
function interface moudle program subroutine then type where
statement.end.$(file.patterns.fortran)=5 end
statement.lookback.$(file.patterns.fortran)=20

style.fortran.0=fore:#808080,$(font.monospace)
style.f77.0=fore:#808080,$(font.monospace)
style.fortran.32=$(font.monospace)
style.f77.32=$(font.monospace)
style.fortran.1=$(colour.code.comment.box),$(font.monospace)
style.f77.1=$(colour.code.comment.box),$(font.monospace)
style.fortran.2=$(colour.number),$(font.monospace)
style.f77.2=$(colour.number),$(font.monospace)
style.fortran.3=$(colour.string),$(font.monospace)
style.f77.3=$(colour.string),$(font.monospace)
style.fortran.4=$(colour.string),$(font.monospace)
style.f77.4=$(colour.string),$(font.monospace)
style.fortran.5=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.f77.5=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.fortran.6=$(colour.operator),$(font.monospace),bold
style.f77.6=$(colour.operator),$(font.monospace),bold
style.fortran.7=$(font.monospace)
style.f77.7=$(font.monospace)
style.fortran.8=$(colour.keyword),$(font.monospace)
style.f77.8=$(colour.keyword),$(font.monospace)
style.fortran.9=fore:#B00040,$(font.monospace)
style.f77.9=fore:#B00040,$(font.monospace)
style.fortran.10=fore:#B04080,$(font.monospace)
style.f77.10=fore:#B04080,$(font.monospace)
style.fortran.11=$(colour.preproc),$(font.monospace)
style.f77.11=$(colour.preproc),$(font.monospace)
style.fortran.12=$(colour.operator),$(font.monospace),bold
style.f77.12=$(colour.operator),$(font.monospace),bold
style.fortran.13=fore:#E0C0E0,$(font.monospace)
style.f77.13=fore:#B00080,$(font.monospace)
style.fortran.14=fore:#000000,back:#F0E080,$(font.monospace)
style.f77.14=fore:#000000,back:#F0E080,$(font.monospace)

if PLAT_WIN
	fc77=lf95 $(FileNameExt) -c -fix
	fc90=lf95 $(FileNameExt) -c
if PLAT_GTK
	fc77=f77 -c -o $(FileName).o $(FileNameExt)
	fc90=f90 -c -o $(FileName).o $(FileNameExt)

command.compile.*.f=$(fc77)
command.build.*.f=make
command.go.*.f=$(FileName)

command.compile.*.for=$(fc77)
command.build.*.for=make
command.go.*.for=$(FileName)

command.compile.*.f90=$(fc90)
command.build.*.f90=make
command.go.*.f90=$(FileName)

command.compile.*.f95=$(fc90)
command.build.*.f95=make
command.go.*.f95=$(FileName)

if PLAT_WIN
    api.$(file.patterns.fortran)=$(SciteDefaultHome)\fortran.api

autocomplete.fortran.ignorecase=1
autocomplete.f77.ignorecase=1
calltip.fortran.ignorecase=1
calltip.f77.ignorecase=1



file.patterns.web=*.html;*.htm;*.asp;*.shtml;*.htd
file.patterns.php=*.php3;*.phtml;*.php
file.patterns.html=$(file.patterns.web);$(file.patterns.php);*.htt;*.cfm;*.tpl;*.dtd;*.hta
file.patterns.vxml=*.vxml
file.patterns.xml=*.xml;*.xsl;*.svg;*.xul;*.xsd;*.dtd;*.xslt;*.axl
file.patterns.docbook=*.docbook

lexer.$(file.patterns.html)=hypertext
lexer.$(file.patterns.vxml)=hypertext
lexer.$(file.patterns.xml)=xml
lexer.$(file.patterns.docbook)=hypertext

filter.web=Web (html htm asp shtml css xml docbook)|$(file.patterns.web);*.css;*.xml;*.docbook|
filter.php=PHP (php php3 phtml)|$(file.patterns.php)|

fold.html=1



hypertext.elements=\
a abbr acronym address applet area b base basefont \
bdo big blockquote body br button caption center \
cite code col colgroup dd del dfn dir div dl dt em \
fieldset font form frame frameset h1 h2 h3 h4 h5 h6 \
head hr html i iframe img input ins isindex kbd label \
legend li link map menu meta noframes noscript \
object ol optgroup option p param pre q s samp \
script select small span strike strong style sub sup \
table tbody td textarea tfoot th thead title tr tt u ul \
var xml xmlns

hypertext.attributes=\
abbr accept-charset accept accesskey action align alink \
alt archive axis background bgcolor border \
cellpadding cellspacing char charoff charset checked cite \
class classid clear codebase codetype color cols colspan \
compact content coords \
data datafld dataformatas datapagesize datasrc datetime \
declare defer dir disabled enctype event \
face for frame frameborder \
headers height href hreflang hspace http-equiv \
id ismap label lang language leftmargin link longdesc \
marginwidth marginheight maxlength media method multiple \
name nohref noresize noshade nowrap \
object onblur onchange onclick ondblclick onfocus \
onkeydown onkeypress onkeyup onload onmousedown \
onmousemove onmouseover onmouseout onmouseup \
onreset onselect onsubmit onunload \
profile prompt readonly rel rev rows rowspan rules \
scheme scope selected shape size span src standby start style \
summary tabindex target text title topmargin type usemap \
valign value valuetype version vlink vspace width \
text password checkbox radio submit reset \
file hidden image

keywordclass.hypertext=\
$(hypertext.elements) $(hypertext.attributes) public !doctype

vxml.elements=\
assign audio block break catch choice clear disconnect else elseif \
emphasis enumerate error exit field filled form goto grammar help \
if initial link log menu meta noinput nomatch object option p paragraph \
param phoneme prompt property prosody record reprompt return s say-as \
script sentence subdialog submit throw transfer value var voice vxml

vxml.attributes=\
accept age alphabet anchor application base beep bridge category charset \
classid cond connecttimeout content contour count dest destexpr dtmf dtmfterm \
duration enctype event eventexpr expr expritem fetchtimeout finalsilence \
gender http-equiv id level maxage maxstale maxtime message messageexpr \
method mime modal mode name namelist next nextitem ph pitch range rate \
scope size sizeexpr skiplist slot src srcexpr sub time timeexpr timeout \
transferaudio type value variant version volume xml:lang

keywordclass.vxml=\
$(vxml.elements) $(vxml.attributes) public !doctype

keywordclass.php=\
and argv as argc break case cfunction class continue declare default do \
die echo else elseif empty enddeclare endfor endforeach endif endswitch \
endwhile e_all e_parse e_error e_warning eval exit extends false for \
foreach function global http_cookie_vars http_get_vars http_post_vars \
http_post_files http_env_vars http_server_vars if include include_once \
list new not null old_function or parent php_os php_self php_version \
print require require_once return static switch stdclass this true var \
xor virtual while __file__ __line__ __sleep __wakeup

import phpfunctions

keywords.$(file.patterns.html)=$(keywordclass.hypertext)
keywords2.$(file.patterns.html)=$(keywordclass.javascript)
keywords3.$(file.patterns.html)=$(keywordclass.vb)
keywords4.$(file.patterns.html)=$(keywordclass.python)
keywords5.$(file.patterns.html)=$(keywordclass.php)
keywords6.$(file.patterns.html)=ELEMENT DOCTYPE ATTLIST ENTITY NOTATION

docbook.elements42=\
abbrev abstract accel ackno acronym action address affiliation alt anchor \
answer appendix appendixinfo application area areaset areaspec arg article \
articleinfo artpagenums attribution audiodata audioobject author authorblurb \
authorgroup authorinitials beginpage bibliocoverage bibliodiv biblioentry \
bibliography bibliographyinfo biblioid bibliomisc bibliomixed bibliomset \
bibliorelation biblioset bibliosource blockinfo blockquote book bookinfo \
bridgehead callout calloutlist caption caution chapter chapterinfo citation \
citebiblioid citerefentry citetitle city classname classsynopsis classsynopsisinfo \
cmdsynopsis co collab collabname colophon colspec command computeroutput \
confdates confgroup confnum confsponsor conftitle constant constraint \
constraintdef constructorsynopsis contractnum contractsponsor contrib \
copyright coref corpauthor corpname country database date dedication \
destructorsynopsis edition editor email emphasis entry entrytbl envar \
epigraph equation errorcode errorname errortext errortype example \
exceptionname fax fieldsynopsis figure filename firstname firstterm \
footnote footnoteref foreignphrase formalpara funcdef funcparams \
funcprototype funcsynopsis funcsynopsisinfo function glossary glossaryinfo \
glossdef glossdiv glossentry glosslist glosssee glossseealso glossterm \
graphic graphicco group guibutton guiicon guilabel guimenu guimenuitem \
guisubmenu hardware highlights holder honorific htm imagedata imageobject \
imageobjectco important index indexdiv indexentry indexinfo indexterm \
informalequation informalexample informalfigure informaltable initializer \
inlineequation inlinegraphic inlinemediaobject interface interfacename \
invpartnumber isbn issn issuenum itemizedlist itermset jobtitle keycap \
keycode keycombo keysym keyword keywordset label legalnotice lhs lineage \
lineannotation link listitem iteral literallayout lot lotentry manvolnum \
markup medialabel mediaobject mediaobjectco member menuchoice methodname \
methodparam methodsynopsis mm modespec modifier ousebutton msg msgaud \
msgentry msgexplan msginfo msglevel msgmain msgorig msgrel msgset msgsub \
msgtext nonterminal note objectinfo olink ooclass ooexception oointerface \
option optional orderedlist orgdiv orgname otheraddr othercredit othername \
pagenums para paramdef parameter part partinfo partintro personblurb \
personname phone phrase pob postcode preface prefaceinfo primary primaryie \
printhistory procedure production productionrecap productionset productname \
productnumber programlisting programlistingco prompt property pubdate publisher \
publishername pubsnumber qandadiv qandaentry qandaset question quote refclass \
refdescriptor refentry refentryinfo refentrytitle reference referenceinfo \
refmeta refmiscinfo refname refnamediv refpurpose refsect1 refsect1info refsect2 \
refsect2info refsect3 refsect3info refsection refsectioninfo refsynopsisdiv \
refsynopsisdivinfo releaseinfo remark replaceable returnvalue revdescription \
revhistory revision revnumber revremark rhs row sbr screen screenco screeninfo \
screenshot secondary secondaryie sect1 sect1info sect2 sect2info sect3 sect3info \
sect4 sect4info sect5 sect5info section sectioninfo see seealso seealsoie \
seeie seg seglistitem segmentedlist segtitle seriesvolnums set setindex \
setindexinfo setinfo sgmltag shortaffil shortcut sidebar sidebarinfo simpara \
simplelist simplemsgentry simplesect spanspec state step street structfield \
structname subject subjectset subjectterm subscript substeps subtitle \
superscript surname sv symbol synopfragment synopfragmentref synopsis \
systemitem table tbody term tertiary tertiaryie textdata textobject tfoot \
tgroup thead tip title titleabbrev toc tocback tocchap tocentry tocfront \
toclevel1 toclevel2 toclevel3 toclevel4 toclevel5 tocpart token trademark \
type ulink userinput varargs variablelist varlistentry varname videodata \
videoobject void volumenum warning wordasword xref year

docbook.attributes=\
arch condition conformance id lang os remap role revision revisionflag security \
userlevel vendor xreflabel \
status label endterm linkend space width

keywordclass.docbook=\
$(docbook.elements42) $(docbook.attributes)

keywords.$(file.patterns.docbook)=$(keywordclass.docbook)
keywords6.$(file.patterns.docbook)=ELEMENT DOCTYPE ATTLIST ENTITY NOTATION

word.characters.$(file.patterns.html)=$(chars.alpha)$(chars.numeric)_-
comment.stream.start.hypertext=<!--
comment.stream.end.hypertext=-->

keywords.$(file.patterns.xml)=
keywords6.$(file.patterns.xml)=ELEMENT DOCTYPE ATTLIST ENTITY NOTATION

word.characters.$(file.patterns.xml)=$(chars.alpha)$(chars.numeric)_-

keywords.$(file.patterns.vxml)=$(keywordclass.vxml)
keywords2.$(file.patterns.vxml)=$(keywordclass.javascript)



word.characters.$(file.patterns.vxml)=$(chars.alpha)$(chars.numeric)_-

keywords.*.css=\
background background-attachment background-color background-image background-position background-repeat \
border-color border-bottom border-bottom-width border-left border-left-width \
border border-right-width border-right border-style border-top border-top-width border-width \
clear clip color cursor display float \
font font-family font-size font-style font-variant font-weight \
height left letter-spacing line-height \
list-style list-style-image list-style-position list-style-type \
margin margin-bottom margin-left margin-right margin-top overflow \
padding padding-bottom padding-left padding-right padding-top position \
text-align text-decoration text-indent text-transform top \
vertical-align visibility width white-space word-spacing z-index

word.characters.*.css=$(chars.alpha)$(chars.numeric)_-


style.hypertext.0=fore:#000000,$(font.text)
style.hypertext.1=fore:#000080
style.hypertext.2=fore:#FF0000
style.hypertext.3=fore:#008080
style.hypertext.4=fore:#FF0000
style.hypertext.5=$(colour.number)
style.hypertext.6=$(colour.string)
style.hypertext.7=$(colour.string)
style.hypertext.8=fore:#800080
style.hypertext.9=fore:#808000,$(font.text.comment)
style.hypertext.10=fore:#800080,$(font.text)
style.hypertext.11=fore:#000080
style.hypertext.12=fore:#0000FF
style.hypertext.13=fore:#0000FF
style.hypertext.14=fore:#000080
style.hypertext.15=back:#FFFF00
style.hypertext.16=back:#FFDF00
style.hypertext.17=back:#FFDF00
style.hypertext.18=fore:#0000FF,back:#FFEFBF
style.hypertext.19=fore:#FF00FF,back:#FFEFFF
style.hypertext.21=fore:#000080,back:#EFEFFF
style.hypertext.22=fore:#000080,back:#EFEFFF,bold
style.hypertext.23=fore:#006600,back:#EFEFFF
style.hypertext.24=fore:#800000,back:#EFEFFF
style.hypertext.25=fore:#993300,back:#EFEFFF
style.hypertext.26=fore:#800000,back:#FF6666
style.hypertext.27=fore:#3366FF,back:#EFEFFF
style.hypertext.28=fore:#333333,back:#EFEFFF
style.hypertext.29=fore:#808000,back:#EFEFFF
style.hypertext.31=fore:#000066,back:#CCCCE0
style.hypertext.34=fore:#0000FF,notbold,$(font.text)
style.hypertext.35=fore:#FF0000,notbold,$(font.text)

fontcolour.js=$(colour.embedded.js),$(font.js)
style.hypertext.40=fore:#7F7F00
style.hypertext.41=fore:#000000,bold,$(fontcolour.js),eolfilled
style.hypertext.42=$(colour.code.comment.box),$(fontcolour.js),eolfilled
style.hypertext.43=$(colour.code.comment.line),$(fontcolour.js)
style.hypertext.44=$(colour.code.comment.doc),bold,$(fontcolour.js),eolfilled
style.hypertext.45=$(colour.number),$(fontcolour.js)
style.hypertext.46=fore:#000000,$(fontcolour.js)
style.hypertext.47=$(colour.keyword),bold,$(fontcolour.js)
style.hypertext.48=$(colour.string),$(fontcolour.js)
style.hypertext.49=$(colour.string),$(fontcolour.js)
style.hypertext.50=$(colour.operator),bold,$(fontcolour.js)
style.hypertext.51=back:#BFBBB0,eolfilled
style.hypertext.52=back:#FFBBB0

style.hypertext.55=fore:#7F7F00
style.hypertext.56=fore:#000000,bold,$(font.js),back:#DFDF7F,eolfilled
style.hypertext.57=fore:#007F00,$(font.js),back:#DFDF7F,eolfilled
style.hypertext.58=fore:#007F00,$(font.js),back:#DFDF7F
style.hypertext.59=fore:#7F7F7F,bold,$(font.js),back:#DFDF7F,eolfilled
style.hypertext.60=fore:#007F7F,$(font.js),back:#DFDF7F
style.hypertext.61=fore:#000000,$(font.js),back:#DFDF7F
style.hypertext.62=fore:#00007F,bold,$(font.js),back:#DFDF7F
style.hypertext.63=fore:#7F007F,$(font.js),back:#DFDF7F
style.hypertext.64=fore:#7F007F,$(font.js),back:#DFDF7F
style.hypertext.65=fore:#000000,bold,$(font.js),back:#DFDF7F
style.hypertext.66=back:#BFBBB0,eolfilled
style.hypertext.67=back:#FFBBB0

style.hypertext.70=
style.hypertext.71=$(font.vbs),back:#EFEFFF,fore:#000000,eolfilled
style.hypertext.72=$(font.comment),back:#EFEFFF,fore:#008000,eolfilled
style.hypertext.73=$(font.vbs),back:#EFEFFF,fore:#008080,eolfilled
style.hypertext.74=$(font.vbs),back:#EFEFFF,fore:#000080,bold,eolfilled
style.hypertext.75=$(font.vbs),back:#EFEFFF,fore:#800080,eolfilled
style.hypertext.76=$(font.vbs),back:#EFEFFF,fore:#000080,eolfilled
style.hypertext.77=$(font.vbs),back:#7F7FFF,fore:#000080,eolfilled

style.hypertext.80=
style.hypertext.81=$(font.vbs),back:#CFCFEF,fore:#000000,eolfilled
style.hypertext.82=$(font.comment),back:#CFCFEF,fore:#008000,eolfilled
style.hypertext.83=$(font.vbs),back:#CFCFEF,fore:#008080,eolfilled
style.hypertext.84=$(font.vbs),back:#CFCFEF,fore:#000080,bold,eolfilled
style.hypertext.85=$(font.vbs),back:#CFCFEF,fore:#800080,eolfilled
style.hypertext.86=$(font.vbs),back:#CFCFEF,fore:#000080,eolfilled
style.hypertext.87=$(font.vbs),back:#7F7FBF,fore:#000080,eolfilled

style.hypertext.90=fore:#808080
style.hypertext.91=fore:#808080,back:#EFFFEF,eolfilled
style.hypertext.92=fore:#007F00,$(font.comment),back:#EFFFEF,eolfilled
style.hypertext.93=fore:#007F7F,back:#EFFFEF,eolfilled
style.hypertext.94=fore:#7F007F,$(font.monospace),back:#EFFFEF,eolfilled
style.hypertext.95=fore:#7F007F,$(font.monospace),back:#EFFFEF,eolfilled
style.hypertext.96=fore:#00007F,bold,back:#EFFFEF,eolfilled
style.hypertext.97=fore:#7F0000,back:#EFFFEF,eolfilled
style.hypertext.98=fore:#7F0000,back:#EFFFEF,eolfilled
style.hypertext.99=fore:#0000FF,bold,back:#EFFFEF,eolfilled
style.hypertext.100=fore:#007F7F,bold,back:#EFFFEF,eolfilled
style.hypertext.101=bold,back:#EFFFEF,eolfilled
style.hypertext.102=back:#EFFFEF,eolfilled

style.hypertext.105=fore:#808080
style.hypertext.106=fore:#808080,back:#CFEFCF,eolfilled
style.hypertext.107=fore:#007F00,$(font.comment),back:#CFEFCF,eolfilled
style.hypertext.108=fore:#007F7F,back:#CFEFCF,eolfilled
style.hypertext.109=fore:#7F007F,$(font.monospace),back:#CFEFCF,eolfilled
style.hypertext.110=fore:#7F007F,$(font.monospace),back:#CFEFCF,eolfilled
style.hypertext.111=fore:#00007F,bold,back:#CFEFCF,eolfilled
style.hypertext.112=fore:#7F0000,back:#CFEFCF,eolfilled
style.hypertext.113=fore:#7F0000,back:#CFEFCF,eolfilled
style.hypertext.114=fore:#0000FF,bold,back:#CFEFCF,eolfilled
style.hypertext.115=fore:#007F7F,bold,back:#CFEFCF,eolfilled
style.hypertext.116=bold,back:#CFEFCF,eolfilled
style.hypertext.117=back:#CFEFCF,eolfilled

style.hypertext.118=fore:#000033,back:#FFF8F8,eolfilled
style.hypertext.119=fore:#007F00,back:#FFF8F8
style.hypertext.120=fore:#009F00,back:#FFF8F8
style.hypertext.121=fore:#7F007F,italics,back:#FFF8F8
style.hypertext.122=fore:#CC9900,back:#FFF8F8
style.hypertext.123=fore:#00007F,italics,back:#FFF8F8
style.hypertext.124=fore:#999999,$(font.comment),back:#FFF8F8
style.hypertext.125=fore:#666666,italics,$(font.comment),back:#FFF8F8
style.hypertext.126=fore:#00007F,italics,back:#FFF8F8
style.hypertext.127=fore:#000000,back:#FFF8F8


style.xml.0=fore:#000000,$(font.text)
style.xml.1=fore:#000080
style.xml.2=fore:#000080
style.xml.3=fore:#008080
style.xml.4=fore:#008080
style.xml.5=$(colour.number)
style.xml.6=$(colour.string)
style.xml.7=$(colour.string)
style.xml.8=fore:#800080
style.xml.9=fore:#808000
style.xml.10=fore:#800080,$(font.text)
style.xml.11=fore:#000080
style.xml.12=fore:#800080,bold
style.xml.13=fore:#800080,bold
style.xml.17=fore:#800000,back:#FFF0F0,$(font.text),eolfilled
style.xml.18=fore:#800000
style.xml.19=fore:#608060
style.xml.21=fore:#000080,back:#EFEFFF
style.xml.22=fore:#000080,back:#EFEFFF,bold
style.xml.23=fore:#006600,back:#EFEFFF
style.xml.24=fore:#800000,back:#EFEFFF
style.xml.25=fore:#993300,back:#EFEFFF
style.xml.26=fore:#800000,back:#FF6666
style.xml.27=fore:#3366FF,back:#EFEFFF
style.xml.28=fore:#333333,back:#EFEFFF
style.xml.29=fore:#808000,back:#EFEFFF
style.xml.31=fore:#000066,back:#CCCCE0
braces.xml.style=31

if PLAT_WIN
	command.go.$(file.patterns.web)="file://$(FilePath)"
	command.go.subsystem.$(file.patterns.web)=2
	command.go.$(file.patterns.php)=php -f $(FileNameExt)
if PLAT_GTK
	command.go.$(file.patterns.web)=netscape "file://$(FilePath)"

file.patterns.latex=*.tex;*.sty

lexer.$(file.patterns.latex)=latex

style.latex.0=fore:#000000
style.latex.1=fore:#AA0000,bold
style.latex.2=fore:#880088,bold
style.latex.3=fore:#0000FF
style.latex.4=fore:#00AA00

command.compile.*.tex=latex $(FileNameExt)
command.build.*.tex=dvips -f $(FileName).dvi > $(FileName).ps
command.go.*.tex=dvips $(FileName).dvi

command.name.0.*.tex=View
command.0.*.tex=xdvi $(FileName).dvi
command.name.1.*.tex=View PS
command.1.*.tex=gv $(FileName).ps

file.patterns.lisp=*.lsp;*.lisp

filter.lisp=LISP (lsp lisp)|$(file.patterns.lisp)|

file.patterns.scheme=*.scm;*.smd;*.ss
filter.scheme=Scheme (scm smd)|$(file.patterns.scheme)|

lexer.$(file.patterns.lisp)=lisp
lexer.$(file.patterns.scheme)=lisp

keywords.$(file.patterns.lisp)= not defun + - * / = < > <= >= princ \
eval apply funcall quote identity function complement backquote lambda set setq setf \
defun defmacro gensym make symbol intern symbol name symbol value symbol plist get \
getf putprop remprop hash make array aref car cdr caar cadr cdar cddr caaar caadr cadar \
caddr cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr \
cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr cons list append reverse last nth \
nthcdr member assoc subst sublis nsubst  nsublis remove length list length \
mapc mapcar mapl maplist mapcan mapcon rplaca rplacd nconc delete atom symbolp numberp \
boundp null listp consp minusp zerop plusp evenp oddp eq eql equal cond case and or let l if prog \
prog1 prog2 progn go return do dolist dotimes catch throw error cerror break \
continue errset baktrace evalhook truncate float rem min max abs sin cos tan expt exp sqrt \
random logand logior logxor lognot bignums logeqv lognand lognor \
logorc2 logtest logbitp logcount integer length nil

word.chars.lisp=$(chars.alpha)$(chars.numeric)_-<>.#+@$%^&=*!?
word.characters.$(file.patterns.lisp)=$(word.chars.lisp)

keywords.$(file.patterns.scheme)= + - * / = < > <= >= => \
abs acos and angle append apply asin assoc assoc assq assv atan \
begin boolean? \
caar cadr call-with-current-continuation call/cc \
call-with-input-file call-with-output-file call-with-values \
car cdr \
caar cadr cdar cddr \
caaar caadr cadar caddr cdaar cdadr cddar cdddr \
caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr \
cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr \
case ceiling char->integer \
char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? \
char-downcase char-lower-case? char-numeric? char-ready? \
char-upcase char-upper-case? char-whitespace? \
char<=? char<? char=? char>=? char>? char? \
close-input-port close-output-port complex? cond cons cos \
current-input-port current-output-port \
define define-syntax delay denominator display do dynamic-wind \
else eof-object? eq? equal? eqv? eval even? exact->inexact exact? \
exp expt \
floor for-each force \
gcd \
if imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment \
lambda lcm length let let* let-syntax letrec letrec-syntax \
list list->string list->vector list-ref list-tail list? load log \
magnitude make-polar make-rectangular make-string make-vector \
map max member memq memv min modulo \
negative? newline not null-environment null? number->string number? numerator \
odd? open-input-file open-output-file or output-port? \
pair? peek-char input-port? output-port? positive? procedure? \
quasiquote quote quotient \
rational? rationalize read read-char real-part real? remainder reverse round \
scheme-report-environment set! set-car! set-cdr! sin sqrt string \
string->list string->number string->symbol string-append \
string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? \
string-copy string-fill! string-length string-ref string-set! \
string<=? string<? string=? string>=? string>? string? \
substring symbol->string symbol? syntax-rules \
transcript-off transcript-on truncate \
unquote unquote-splicing \
values vector vector->list vector-fill! vector-length vector-ref vector-set! vector? \
with-input-from-file with-output-to-file write write-char \
zero?

word.chars.scheme=$(chars.alpha)$(chars.numeric)!$%&*/:<=>?^_~+-.@
word.characters.$(file.patterns.scheme)=$(word.chars.scheme)


comment.block.lisp=;
comment.box.start.lisp=;;
comment.box.middle.lisp=;;
comment.box.end.lisp=;;



style.lisp.32=$(font.base)
style.lisp.0=fore:#808080
style.lisp.1=$(colour.code.comment.box),$(font.code.comment.box)
style.lisp.2=$(colour.number)
style.lisp.3=$(colour.keyword),bold
style.lisp.6=$(colour.string)
style.lisp.10=$(colour.operator),bold
style.lisp.9=
style.lisp.8=fore:#000000,font:Verdana,size:9,back:#fefecc,eolfilled
style.lisp.34=fore:#0000FF,bold
style.lisp.35=fore:#FF0000,bold
braces.lisp.style=10

command.go.$(file.patterns.scheme)=c:\tools\gambit\gsi.exe -f $(FilePath)
command.go.subsystem.$(file.patterns.scheme)=0

file.patterns.lua=*.lua

filter.lua=Lua (lua)|$(file.patterns.lua)|

lexer.$(file.patterns.lua)=lua

keywordclass.lua=and break do else elseif end false for function global if \
in local nil not or repeat return then true until while
keywords.$(file.patterns.lua)=$(keywordclass.lua)

keywords2.$(file.patterns.lua)=_ALERT _ERRORMESSAGE _INPUT _PROMPT _OUTPUT \
_STDERR _STDIN _STDOUT _VERSION assert call collectgarbage dofile dostring \
error foreach foreachi gcinfo getn globals loadfile loadstring newtype print \
rawget rawset require sort tonumber tostring tinsert tremove type unpack

keywords3.$(file.patterns.lua)=abs acos asin atan atan2 ceil cos deg exp \
floor format frexp gsub ldexp log log10 max min mod rad random randomseed \
sin sqrt strbyte strchar strfind strlen strlower strrep strsub strupper tan

keywords4.$(file.patterns.lua)=openfile closefile readfrom writeto appendto \
remove rename flush seek tmpfile tmpname read write \
clock date difftime execute exit getenv setlocale time


indent.maintain.$(file.patterns.lua)=1

comment.block.lua=--~
comment.block.at.line.start.lua=1


style.lua.32=$(font.code.base),fore:#000000
style.lua.0=fore:#FF0000
style.lua.1=$(colour.code.comment.box),$(font.code.comment.box),back:#E0F0F0
style.lua.2=$(colour.code.comment.line),$(font.code.comment.line)
style.lua.3=$(colour.notused),$(font.notused)
style.lua.4=$(colour.number)
style.lua.5=$(colour.keyword)
style.lua.6=$(colour.string)
style.lua.7=$(colour.char)
style.lua.8=$(colour.string),$(font.code.comment.box),back:#E0FFFF
style.lua.9=$(colour.preproc)
style.lua.10=$(colour.operator)
style.lua.11=
style.lua.12=back:#E0C0E0,eolfilled
style.lua.13=$(style.lua.5),back:#D0FFD0
style.lua.14=$(style.lua.5),back:#D0D0FF
style.lua.15=$(style.lua.5),back:#FFD0D0
style.lua.16=$(style.lua.5),back:#FFD0FF
style.lua.17=$(style.lua.5),back:#FFFFD0
braces.lua.style=10

command.compile.*.lua=luac -o "$(FileName).luc" "$(FileNameExt)"
command.go.*.lua=lua "$(FileNameExt)"

file.patterns.matlab=*.m

filter.matlab=Matlab (m)|$(file.patterns.matlab)|

lexer.$(file.patterns.matlab)=matlab

keywordclass.matlab=break case catch continue else elseif end for function \
global if otherwise persistent return switch try while

keywords.$(file.patterns.matlab)=$(keywordclass.matlab)

comment.block.matlab=%~

style.matlab.0=fore:#000000
style.matlab.1=$(colour.code.comment.line),$(font.code.comment.line)
style.matlab.2=$(colour.preproc)
style.matlab.3=$(colour.number)
style.matlab.4=$(colour.keyword),bold
style.matlab.5=$(colour.string)
style.matlab.6=$(colour.operator),bold
style.matlab.7=


file.patterns.nncron=*.tab;*.spf

lexer.$(file.patterns.nncron)=nncrontab

filter.nncrontab=nnCron files (tab spf)|$(file.patterns.nncron)|

word.characters.$(file.patterns.nncron)=$(chars.alpha)$(chars.numeric)%-

comment.block.nncrontab=\ 


keywords.$(file.patterns.nncron)=\
AGAIN ALLOT AND Action BEGIN CASE COMPARE CONSTANT CREATE DO Days ELSE \
ENDCASE ENDOF EVAL-SUBST EVALUATE FALSE Hours I IF LEAVE LOOP Minutes \
Months NOT OF OFF ON OR PAD REPEAT Rule SET THEN TRUE Time UNTIL VALUE \
VARIABLE WHILE WeekDays Years 

keywords2.$(file.patterns.nncron)=\
</JScript> </SCRIPT> </VBScript> <JScript> <VBScript> ACCESS-DATE BEEP \
CALL_DIAL CALL_HANGUP CHAR CLIPBOARD CONSOLE CREATION-DATE CUR-DATE DATE- \
DATE-INTERVAL DELAY DIAL DIR-CREATE DIR-DELETE DIR-EMPTY DIR-SIZE Day@ \
Domain ERR-MSG EXIST FILE-ACCESS-DATE FILE-APPEND FILE-COPY FILE-CREATE \
FILE-CREATION-DATE FILE-CROP FILE-DATE FILE-DELETE FILE-EMPTY FILE-EXIST \
FILE-MOVE FILE-RENAME FILE-SIZE FILE-WRITE FILE-WRITE-DATE FOR-CHILD-WINDOWS \
FOR-FILES FOR-WINDOWS FREE-SPACE GET-CUR-TIME GET-REG GET-VER GetTickCount \
HANGUP HIDE-ICON HINT HINT-OFF HINT-POS HINT-SIZE HINTW HOST-EXIST Hour@ \
IDLE INTERVAL IS-ARCHIVE IS-DIR IS-HIDDEN IS-READONLY IS-SYSTEM KILL LAUNCH \
LOG LOGGEDON LOGOFF LogonBatch LogonInteractive LogonNetwork MOUSE-LBCLK \
MOUSE-LBDCLK MOUSE-LBDN MOUSE-LBUP MOUSE-MOVE MOUSE-MOVER MOUSE-MOVEW \
MOUSE-RBCLK MOUSE-RBDCLK MOUSE-RBDN MOUSE-RBUP MSG Min@ Mon@ \
MonitorResponseTime NHOST-EXIST No ONLINE PAUSE PLAY-SOUND PLAY-SOUNDW \
POP3-CHECK POWEROFF PROC-EXIST PROC-TIME PURGE-OLD PURGE-OLDA PURGE-OLDW \
Password QSTART-APP QSTART-APPW QUERY QUIT RASDomain RASError RASPassword \
RASPhone RASSecPassword RASUser RE-ALL RE-MATCH REBOOT REG-DELETE-KEY \
REG-DELETE-VALUE REG-DWORD REG-SZ REMINDER RUN SEND-KEYS SEND-KEYS-DELAY \
SHOW-ICON SHUTDOWN START-APP START-APPW START-QUIT START-TIME Sec@ \
SecPassword THINT THINTW TimeSec@ TMSG TQUERY User WDay@ WIN-ACTIVATE \
WIN-ACTIVE WIN-CLICK WIN-CLOSE WIN-EXIST WIN-HIDE WIN-HWND WIN-MAXIMIZE \
WIN-MINIMIZE WIN-MOVE WIN-MOVER WIN-RESTORE WIN-SEND-KEYS WIN-SHOW \
WIN-TERMINATE WIN-TOPMOST WIN-VER WIN-WAIT WINAPI WRITE-DATE WatchClipboard \
WatchConnect WatchDir WatchDisconnect WatchDriveInsert WatchDriveRemove \
WatchFile WatchProc WatchProcStop WatchWinActivate WatchWinCreate \
WatchWinDestroy WatchWindow WinNT Year@ Yes 

keywords3.$(file.patterns.nncron)=\
ALL AboveNormalPriority AsService BelowNormalPriority FILESONLY \
HighPriority IdlePriority LoadProfile NoActive NoDel NoLog NoRunAs \
NormalPriority OnceADay OnceAHour OnceAMonth OnceAWeek RECURSIVE \
RealtimePriority RunOnce SWHide ShowMaximized ShowMinimized ShowNoActivate \
ShowNormal StartIn StartPos StartSize TODEPTH WATCH-CHANGE-ATTRIBUTES \
WATCH-CHANGE-DIR-NAME WATCH-CHANGE-FILE-NAME WATCH-CHANGE-LAST-WRITE \
WATCH-CHANGE-SECURITY WATCH-CHANGE-SIZE WaitFor WatchSubtree WithoutProfile 

style.nncrontab.0=
style.nncrontab.1=fore:#007F00,$(font.comment)
style.nncrontab.2=$(colour.string),back:#606060,fore:#FFFF00
style.nncrontab.3=fore:#00007F,bold
style.nncrontab.4=fore:#000000,bold
style.nncrontab.5=fore:#00007F,italics
style.nncrontab.6=fore:#000000,bold,back:#FFE0FF
style.nncrontab.7=fore:#007F7F
style.nncrontab.8=fore:#7F007F,$(font.monospace)
style.nncrontab.9=back:#FFFFE0


file.patterns.props=*.properties;*.ini;*.inf;*.reg;*.url;*.cfg;*.cnf;*.aut
file.patterns.text=*.txt;*.log;*.lst;*.doc;*.diz;*.nfo
file.patterns.batch=*.bat;*.cmd;*.nt
file.patterns.diff=*.diff;*.patch
file.patterns.make=makefile;Makefile;*.mak;configure*

filter.properties=Properties (ini inf reg url cfg cnf)|$(file.patterns.props)|
filter.text=Text (txt log lst doc diz nfo)|$(file.patterns.text);make*|
filter.batch=Batch (bat cmd nt)|$(file.patterns.batch)|
filter.diff=Difference (diff patch)|$(file.patterns.diff)|

lexer.$(file.patterns.props)=props
lexer.$(file.patterns.batch)=batch
lexer.*.err=errorlist
lexer.$(file.patterns.make)=makefile
lexer.*.iface=makefile
lexer.$(file.patterns.diff)=diff

word.characters.$(file.patterns.text)=$(chars.alpha)$(chars.numeric)$(chars.accented)-'

colour.other.operator=fore:#B06000


style.props.0=
style.props.1=fore:#007F7F,$(font.comment)
style.props.2=$(colour.string),back:#E0F0F0,eolfilled
style.props.3=$(colour.other.operator)
style.props.4=$(colour.preproc)
style.props.34=fore:#0000FF,notbold
style.props.35=fore:#FF0000,notbold
comment.block.props=#~
preprocessor.symbol.$(file.patterns.make)=!
preprocessor.start.$(file.patterns.make)=IF IFDEF IFNDEF
preprocessor.middle.$(file.patterns.make)=ELSE ELSEIF ELSEIFDEF ELSEIFNDEF
preprocessor.end.$(file.patterns.make)=ENDIF


keywordclass.batch=rem set if exist errorlevel for in do \
break call chcp cd chdir choice cls country ctty date del erase dir echo \
exit goto loadfix loadhigh mkdir md move path pause prompt rename ren \
rmdir rd shift time type ver verify vol \
com con lpt nul
keywords.$(file.patterns.batch)=$(keywordclass.batch)

style.batch.0=fore:#000000
style.batch.1=fore:#007F00,$(font.comment)
style.batch.2=$(colour.keyword)
style.batch.3=$(colour.string),back:#606060,fore:#FFFF00,eolfilled
style.batch.4=$(colour.preproc)
style.batch.5=$(colour.keyword),$(font.monospace),bold
style.batch.6=back:#FFFFE0
style.batch.7=$(colour.other.operator)

comment.block.batch=REM ~


style.makefile.0=fore:#000000
style.makefile.1=$(colour.other.comment),$(font.code.comment.box)
style.makefile.2=$(colour.preproc)
style.makefile.3=fore:#000080
style.makefile.4=$(colour.other.operator)
style.makefile.5=fore:#A00000
style.makefile.9=$(colour.error),eolfilled
style.makefile.34=fore:#0000FF,notbold
style.makefile.35=fore:#FF0000,notbold

comment.block.makefile=#~


style.errorlist.32=fore:#B06000,$(font.small)
style.errorlist.0=fore:#000000
style.errorlist.1=fore:#FF0000
style.errorlist.2=fore:#800080
style.errorlist.3=fore:#808000
style.errorlist.4=fore:#0000FF
style.errorlist.5=fore:#B06000
style.errorlist.6=fore:#FF0000
style.errorlist.7=fore:#FF0000
style.errorlist.8=fore:#FF0000
style.errorlist.9=fore:#FF00FF
style.errorlist.10=fore:#007F00
style.errorlist.11=fore:#00007F
style.errorlist.12=fore:#007F7F
style.errorlist.13=fore:#7F0000
style.errorlist.14=fore:#FF0000
style.errorlist.33=$(font.small)


style.diff.0=fore:#000000
style.diff.1=fore:#007F00
style.diff.2=fore:#7F7F00
style.diff.3=fore:#7F0000
style.diff.4=fore:#7F007F
style.diff.5=fore:#007F7F
style.diff.6=fore:#00007F

command.build.makefile=make
command.build.*.mak=make

if PLAT_WIN
	command.go.*.bat=$(FileNameExt)
	command.name.0.*.bat=Execute Selection
	command.0.*.bat=$(CurrentSelection)
	command.name.1.*.mak=nmake
	command.1.*.mak=nmake -f $(FileNameExt)

filter.pascal=Pascal (pas inc)|*.pas;*.inc;*.pp|

file.patterns.pascal=*.pas;*.inc;*.pp
lexer.$(file.patterns.pascal)=pascal

keywordclass.pascal=program const type var begin end array set packed record string if then else \
while for to downto do with repeat until case of goto exit label procedure \
function nil file and or not xor div mod unit uses implementation interface \
external asm inline object constructor destructor virtual far assembler near \
inherited stdcall cdecl library export exports end. \
class ansistring raise try except on index name finally \
resourcestring false true initialization finalization \
override overload

keywordclass.pascalclasses=write read default public protected private property published stored

keywords.$(file.patterns.pascal)=$(keywordclass.pascal)
keywords2.$(file.patterns.pascal)=$(keywordclass.pascalclasses)

style.pascal.0=fore:#000000,$(font.pascal)
style.pascal.1=fore:#007F00,$(font.comment)
style.pascal.2=fore:#007F00,$(font.comment)
style.pascal.3=fore:#7F7F7F
style.pascal.4=fore:#007F7F

style.pascal.5=fore:#00007F,bold
style.pascal.6=fore:#7F007F,italics,$(font.comment)
style.pascal.7=fore:#7F007F,italics,$(font.text)
style.pascal.8=fore:#007F7F
style.pascal.9=fore:#7F7F00
style.pascal.10=fore:#000000
style.pascal.34=fore:#0000FF,notbold
style.pascal.35=fore:#FF0000,notbold
braces.pascal.style=10

statement.indent.$(file.patterns.pascal)=5 case catch class default do else for then \
private protected public struct try union while type
statement.end.$(file.patterns.pascal)=10 ;
statement.lookback.$(file.patterns.pascal)=20
block.start.$(file.patterns.pascal)=10 begin
block.end.$(file.patterns.pascal)=10 end



command.compile.*.pas=fpc "$(FilePath)"

if PLAT_WIN
	command.go.*.pas="$(FileName).exe"
	command.go.subsystem.*.pas=2
if PLAT_GTK
	command.go.*.pas="kvt -e $(FileName)"

command.build.*.pas=fpc -B "$(FilePath)"
command.build.subsystem.*.pas=1

command.name.0.*.pas=Debug Compile
command.0.*.pas=fpc -g "$(FilePath)"
command.name.1.*.pas=Debug Build
command.1.*.pas=fpc -g -B "$(FilePath)"
command.name.2.*.pas=GDB
if PLAT_WIN
	command.2.*.pas=gdbpasw "$(FileName)"
if PLAT_GTK
	command.2.*.pas=gdb "$(FileName)"
	command.name.3.*.pas=DDD
	command.3.*.pas=ddd "$(FileName)"


file.patterns.perl=*.pl;*.pm;*.cgi;*.pod
file.patterns.bash=*.sh;*.bsh

filter.perl=Perl (pl pm)|$(file.patterns.perl)|

lexer.$(file.patterns.perl)=perl
lexer.$(file.patterns.bash)=perl

keywords.$(file.patterns.perl)=\
NULL __FILE__ __LINE__ __PACKAGE__ __DATA__ __END__ AUTOLOAD \
BEGIN CORE DESTROY END EQ GE GT INIT LE LT NE CHECK abs accept \
alarm and atan2 bind binmode bless caller chdir chmod chomp chop \
chown chr chroot close closedir cmp connect continue cos crypt \
dbmclose dbmopen defined delete die do dump each else elsif endgrent \
endhostent endnetent endprotoent endpwent endservent eof eq eval \
exec exists exit exp fcntl fileno flock for foreach fork format \
formline ge getc getgrent getgrgid getgrnam gethostbyaddr gethostbyname \
gethostent getlogin getnetbyaddr getnetbyname getnetent getpeername \
getpgrp getppid getpriority getprotobyname getprotobynumber getprotoent \
getpwent getpwnam getpwuid getservbyname getservbyport getservent \
getsockname getsockopt glob gmtime goto grep gt hex if index \
int ioctl join keys kill last lc lcfirst le length link listen \
local localtime lock log lstat lt m map mkdir msgctl msgget msgrcv \
msgsnd my ne next no not oct open opendir or ord our pack package \
pipe pop pos print printf prototype push q qq qr quotemeta qu \
qw qx rand read readdir readline readlink readpipe recv redo \
ref rename require reset return reverse rewinddir rindex rmdir \
s scalar seek seekdir select semctl semget semop send setgrent \
sethostent setnetent setpgrp setpriority setprotoent setpwent \
setservent setsockopt shift shmctl shmget shmread shmwrite shutdown \
sin sleep socket socketpair sort splice split sprintf sqrt srand \
stat study sub substr symlink syscall sysopen sysread sysseek \
system syswrite tell telldir tie tied time times tr truncate \
uc ucfirst umask undef unless unlink unpack unshift untie until \
use utime values vec wait waitpid wantarray warn while write \
x xor y

keywords.$(file.patterns.bash)=alias \
ar asa awk banner basename bash bc bdiff break \
bunzip2 bzip2 cal calendar case cat cc cd chmod cksum \
clear cmp col comm compress continue cp cpio crypt \
csplit ctags cut date dc dd declare deroff dev df diff diff3 \
dircmp dirname do done du echo ed egrep elif else env \
esac eval ex exec exit expand export expr false fc \
fgrep fi file find fmt fold for function functions \
getconf getopt getopts grep gres hash head help \
history iconv id if in integer jobs join kill local lc \
let line ln logname look ls m4 mail mailx make \
man mkdir more mt mv newgrp nl nm nohup ntps od \
pack paste patch pathchk pax pcat perl pg pr print \
printf ps pwd read readonly red return rev rm rmdir \
sed select set sh shift size sleep sort spell \
split start stop strings strip stty sum suspend \
sync tail tar tee test then time times touch tr \
trap true tsort tty type typeset ulimit umask unalias \
uname uncompress unexpand uniq unpack unset until \
uudecode uuencode vi vim vpax wait wc whence which \
while who wpaste wstart xargs zcat

word.characters.$(file.patterns.perl)=$(chars.alpha)$(chars.numeric)_$@%&

comment.block.perl=#~

colour.perl.heredoc=$(colour.embedded.comment)

style.perl.32=
style.perl.0=fore:#808080,$(font.base)
style.perl.1=$(colour.error)
style.perl.2=$(colour.code.comment.box),$(font.code.comment.box)
style.perl.3=fore:#004000,back:#E0FFE0,$(font.text),eolfilled
style.perl.4=$(colour.number)
style.perl.5=$(colour.keyword),bold
style.perl.6=$(colour.string),$(font.monospace)
style.perl.7=$(colour.character),$(font.monospace)
style.perl.8=$(colour.notused),$(font.notused)
style.perl.9=$(colour.notused),$(font.notused)
style.perl.10=$(colour.operator),bold
style.perl.11=fore:#000000
style.perl.12=fore:#000000,back:#FFE0E0
style.perl.13=fore:#000000,back:#FFFFE0
style.perl.14=fore:#000000,back:#FFE0FF
style.perl.15=fore:#000000,back:#E0E0E0
style.perl.17=fore:#000000,back:#A0FFA0
style.perl.18=fore:#000000,back:#F0E080
style.perl.19=fore:#FFFF00,back:#8080A0
style.perl.20=fore:#FFFF00,back:#A08080
style.perl.21=fore:#600000,back:#FFF0D8,eolfilled
style.perl.22=fore:#000000,back:#DDD0DD
style.perl.23=fore:#7F007F,back:#DDD0DD,eolfilled,notbold
style.perl.24=fore:#7F007F,back:#DDD0DD,eolfilled,bold
style.perl.25=fore:#7F007F,back:#DDD0DD,eolfilled,italics
style.perl.26=fore:#7F007F,$(font.monospace),notbold
style.perl.27=$(style.perl.6)
style.perl.28=$(style.perl.20)
style.perl.29=$(style.perl.17)
style.perl.30=$(style.perl.13)
braces.perl.style=10

command.go.$(file.patterns.perl)=perl -w $(FileNameExt)

command.compile.$(file.patterns.perl)=perl -c -w $(FileNameExt)
command.name.0.$(file.patterns.perl)=Lint
command.0.$(file.patterns.perl)=perl -MO=Lint,all $(FileNameExt)

command.name.1.$(file.patterns.perl)=Check Syntax
command.1.$(file.patterns.perl)=perl -cw $(FileNameExt)

command.name.2.$(file.patterns.perl)=Code Profiler
command.2.$(file.patterns.perl)=perl -d:DProf $(FileNameExt)

command.name.3.$(file.patterns.perl)=Profiler Parser
command.3.$(file.patterns.perl)=C:\Perl\bin\dprofpp.bat $(FileDir)\tmon.out

filter.python=Python (py pyw)|*.py;*.pyw|

file.patterns.py=*.py;*.pyw

lexer.$(file.patterns.py)=python

keywordclass.python=and assert break class continue def del elif \
else except exec finally for from global if import in is lambda None \
not or pass print raise return try while yield

keywords.$(file.patterns.py)=$(keywordclass.python)

statement.indent.*.py=10 :
statement.end.*.py=
statement.lookback.*.py=0
block.start.*.py=
block.end.*.py=

tab.timmy.whinge.level=1


comment.block.python=#~

style.python.0=fore:#808080
style.python.1=fore:#007F00,$(font.comment)
style.python.2=fore:#007F7F
style.python.3=fore:#7F007F,$(font.monospace)
style.python.4=fore:#7F007F,$(font.monospace)
style.python.5=fore:#00007F,bold
style.python.6=fore:#7F0000
style.python.7=fore:#7F0000
style.python.8=fore:#0000FF,bold
style.python.9=fore:#007F7F,bold
style.python.10=bold
style.python.11=
style.python.12=fore:#7F7F7F
style.python.13=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.python.34=fore:#0000FF,bold
style.python.35=fore:#FF0000,bold
braces.python.style=10

if PLAT_WIN
	command.go.*.py=pythonw -u $(FileNameExt)
	command.go.subsystem.*.py=1
	command.go.*.pyw=pythonw -u $(FileNameExt)
	command.go.subsystem.*.pyw=1

if PLAT_GTK
	command.go.*.py=python -u $(FileNameExt)

command.name.1.*.py=Syntax Check
command.1.*.py=python -c "import py_compile; py_compile.compile(r'$(FilePath)')"

filter.ruby=Ruby (rb)|*.rb|

lexer.*.rb=ruby

file.patterns.rb=*.rb

keywordclass.ruby=__FILE__ and def end in or self unless __LINE__ begin \
defined? ensure module redo super until BEGIN break do false next rescue \
then when END case else for nil retry true while alias class elsif if \
not return undef yield
keywords.$(file.patterns.rb)=$(keywordclass.ruby)

statement.indent.*.rb=
statement.end*.rb=
statement.lookback.*.rb=1
block.start.*.rb=10

comment.block.ruby=#~

style.ruby.0=fore:#808080
style.ruby.1=fore:#007F00,$(font.comment)
style.ruby.2=fore:#007F7F
style.ruby.3=fore:#7F007F,$(font.monospace)
style.ruby.4=fore:#7F007F,$(font.monospace)
style.ruby.5=fore:#00007F,bold
style.ruby.7=fore:#7F0000
style.ruby.8=fore:#0000FF,bold
style.ruby.9=fore:#007F7F,bold
style.ruby.10=bold
style.ruby.11=fore:#7F7F7F
style.ruby.12=fore:#7F7F7F
style.ruby.13=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.ruby.34=fore:#0000FF,bold
style.ruby.35=fore:#FF0000,bold
braces.ruby.style=10

if PLAT_WIN
	command.go.*.rb=ruby $(FileNameExt)
	command.go.subsystem.*.rb=1

if PLAT_GTK
	command.go.*.rb=ruby $(FileNameExt)

filter.sql=SQL (sql)|*.sql|

file.patterns.sql=*.sql
file.patterns.plsql=*.spec;*.body;*.sps;*.spb;*.sf;*.sp

lexer.$(file.patterns.sql)=sql
lexer.$(file.patterns.plsql)=sql

style.sql.0=fore:#808080
style.sql.1=fore:#007F00,$(font.comment)
style.sql.2=fore:#007F00,$(font.comment)
style.sql.3=fore:#7F7F7F
style.sql.4=fore:#007F7F
style.sql.5=fore:#00007F,bold
style.sql.6=fore:#7F007F,$(font.monospace)
style.sql.7=fore:#7F007F,$(font.monospace)
style.sql.8=fore:#007F7F
style.sql.9=fore:#7F7F00
style.sql.10=bold
style.sql.11=
style.sql.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
braces.sql.style=10

keywords.$(file.patterns.sql)=\
ABSOLUTE ACTION ADD ADMIN AFTER AGGREGATE \
ALIAS ALL ALLOCATE ALTER AND ANY ARE ARRAY AS ASC \
ASSERTION AT AUTHORIZATION \
BEFORE BEGIN BINARY BIT BLOB BOOLEAN BOTH BREADTH BY \
CALL CASCADE CASCADED CASE CAST CATALOG CHAR CHARACTER \
CHECK CLASS CLOB CLOSE COLLATE COLLATION COLUMN COMMIT \
COMPLETION CONNECT CONNECTION CONSTRAINT CONSTRAINTS \
CONSTRUCTOR CONTINUE CORRESPONDING CREATE CROSS CUBE CURRENT \
CURRENT_DATE CURRENT_PATH CURRENT_ROLE CURRENT_TIME CURRENT_TIMESTAMP \
CURRENT_USER CURSOR CYCLE \
DATA DATE DAY DEALLOCATE DEC DECIMAL DECLARE DEFAULT \
DEFERRABLE DEFERRED DELETE DEPTH DEREF DESC DESCRIBE DESCRIPTOR \
DESTROY DESTRUCTOR DETERMINISTIC DICTIONARY DIAGNOSTICS DISCONNECT \
DISTINCT DOMAIN DOUBLE DROP DYNAMIC \
EACH ELSE END END-EXEC EQUALS ESCAPE EVERY EXCEPT \
EXCEPTION EXEC EXECUTE EXTERNAL \
FALSE FETCH FIRST FLOAT FOR FOREIGN FOUND FROM FREE FULL \
FUNCTION \
GENERAL GET GLOBAL GO GOTO GRANT GROUP GROUPING \
HAVING HOST HOUR \
IDENTITY IGNORE IMMEDIATE IN INDICATOR INITIALIZE INITIALLY \
INNER INOUT INPUT INSERT INT INTEGER INTERSECT INTERVAL \
INTO IS ISOLATION ITERATE \
JOIN \
KEY \
LANGUAGE LARGE LAST LATERAL LEADING LEFT LESS LEVEL LIKE \
LIMIT LOCAL LOCALTIME LOCALTIMESTAMP LOCATOR \
MAP MATCH MINUTE MODIFIES MODIFY MODULE MONTH \
NAMES NATIONAL NATURAL NCHAR NCLOB NEW NEXT NO NONE \
NOT NULL NUMERIC \
OBJECT OF OFF OLD ON ONLY OPEN OPERATION OPTION \
OR ORDER ORDINALITY OUT OUTER OUTPUT \
PAD PARAMETER PARAMETERS PARTIAL PATH POSTFIX PRECISION PREFIX \
PREORDER PREPARE PRESERVE PRIMARY \
PRIOR PRIVILEGES PROCEDURE PUBLIC \
READ READS REAL RECURSIVE REF REFERENCES REFERENCING RELATIVE \
RESTRICT RESULT RETURN RETURNS REVOKE RIGHT \
ROLE ROLLBACK ROLLUP ROUTINE ROW ROWS \
SAVEPOINT SCHEMA SCROLL SCOPE SEARCH SECOND SECTION SELECT \
SEQUENCE SESSION SESSION_USER SET SETS SIZE SMALLINT SOME| SPACE \
SPECIFIC SPECIFICTYPE SQL SQLEXCEPTION SQLSTATE SQLWARNING START \
STATE STATEMENT STATIC STRUCTURE SYSTEM_USER \
TABLE TEMPORARY TERMINATE THAN THEN TIME TIMESTAMP \
TIMEZONE_HOUR TIMEZONE_MINUTE TO TRAILING TRANSACTION TRANSLATION \
TREAT TRIGGER TRUE \
UNDER UNION UNIQUE UNKNOWN \
UNNEST UPDATE USAGE USER USING \
VALUE VALUES VARCHAR VARIABLE VARYING VIEW \
WHEN WHENEVER WHERE WITH WITHOUT WORK WRITE \
YEAR \
ZONE

keywords.$(file.patterns.plsql)=\
ALL ALTER AND ANY ARRAY AS ASC AT AUTHID AVG BEGIN BETWEEN \
BINARY_INTEGER \
BODY BOOLEAN BULK BY CHAR CHAR_BASE CHECK CLOSE CLUSTER COLLECT \
COMMENT COMMIT COMPRESS CONNECT CONSTANT CREATE CURRENT CURRVAL \
CURSOR DATE DAY DECLARE DECIMAL DEFAULT DELETE DESC DISTINCT \
DO DROP ELSE ELSIF END EXCEPTION EXCLUSIVE EXECUTE EXISTS EXIT \
EXTENDS FALSE FETCH FLOAT FOR FORALL FROM FUNCTION GOTO GROUP \
HAVING HEAP HOUR IF IMMEDIATE IN INDEX INDICATOR INSERT INTEGER \
INTERFACE INTERSECT INTERVAL INTO IS ISOLATION JAVA LEVEL LIKE \
LIMITED LOCK LONG LOOP MAX MIN MINUS MINUTE MLSLABEL MOD MODE \
MONTH NATURAL NATURALN NEW NEXTVAL NOCOPY NOT NOWAIT NULL NUMBER \
NUMBER_BASE OCIROWID OF ON OPAQUE OPEN OPERATOR OPTION OR ORDER \
ORGANIZATION OTHERS OUT PACKAGE PARTITION PCTFREE PLS_INTEGER \
POSITIVE POSITIVEN PRAGMA PRIOR PRIVATE PROCEDURE PUBLIC RAISE \
RANGE RAW REAL RECORD REF RELEASE RETURN REVERSE ROLLBACK ROW \
ROWID ROWNUM ROWTYPE SAVEPOINT SECOND SELECT SEPARATE SET SHARE \
SMALLINT SPACE SQL SQLCODE SQLERRM START STDDEV SUBTYPE SUCCESSFUL \
SUM SYNONYM SYSDATE TABLE THEN TIME TIMESTAMP TO TRIGGER TRUE \
TYPE UID UNION UNIQUE UPDATE USE USER VALIDATE VALUES VARCHAR \
VARCHAR2 VARIANCE VIEW WHEN WHENEVER WHERE WHILE WITH WORK WRITE \
YEAR ZONE


filter.tcl=Tcl (tcl)|*.tcl|

lexer.*.tcl=tcl

filter.itcl=itcl (.itcl)|*.itcl|

lexer.*.itcl=tcl

preprocessor.symbol.*.tcl=
preprocessor.start.*.tcl=
preprocessor.middle.*.tcl=
preprocessor.end.*.tcl=

keywordclass.tcl=after append array auto_execok auto_import auto_load \
auto_load_index auto_qualify beep binary break case catch cd clock \
close concat continue dde default echo else elseif encoding eof \
error eval exec exit expr fblocked fconfigure fcopy file \
fileevent flush for foreach format gets glob global history if \
incr info interp join lappend lindex linsert list llength load \
lrange lreplace lsearch lsort namespace open package pid \
pkg_mkIndex proc puts pwd read regexp regsub rename resource \
return scan seek set socket source split string subst switch \
tclLog tclMacPkgSearch tclPkgSetup tclPkgUnknown tell time \
trace unknown unset update uplevel upvar variable vwait while

keywordclass.tk=bell bind bindtags button canvas checkbutton console \
destroy entry event focus font frame grab grid image label listbox menu \
menubutton message pack place radiobutton raise scale scrollbar \
text tk tkwait toplevel winfo wm

keywordclass.itcl=@scope body class code common component configbody \
constructor define destructor hull import inherit itcl itk itk_component \
itk_initialize itk_interior itk_option iwidgets keep method \
private protected public

keywordclass.TkCommands=tkButtonDown tkButtonEnter tkButtonInvoke \
tkButtonLeave tkButtonUp tkCancelRepeat tkCheckRadioInvoke tkDarken \
tkEntryAutoScan 	tkEntryBackspace tkEntryButton1 tkEntryClosestGap \
tkEntryInsert tkEntryKeySelect tkEntryMouseSelect tkEntryNextWord \
tkEntryPaste tkEntryPreviousWord tkEntrySeeInsert tkEntrySetCursor \
tkEntryTranspose tkEventMotifBindings tkFDGetFileTypes tkFirstMenu \
tkFocusGroup_Destroy tkFocusGroup_In tkFocusGroup_Out tkFocusOK \
tkListboxAutoScan tkListboxBeginExtend tkListboxBeginSelect \
tkListboxBeginToggle tkListboxCancel tkListboxDataExtend \
tkListboxExtendUpDown tkListboxMotion tkListboxSelectAll \
tkListboxUpDown tkMbButtonUp tkMbEnter tkMbLeave tkMbMotion \
tkMbPost tkMenuButtonDown tkMenuDownArrow tkMenuDup tkMenuEscape \
tkMenuFind tkMenuFindName tkMenuFirstEntry tkMenuInvoke tkMenuLeave \
tkMenuLeftArrow tkMenuMotion tkMenuNextEntry tkMenuNextMenu \
tkMenuRightArrow tkMenuUnpost tkMenuUpArrow tkMessageBox \
tkPostOverPoint tkRecolorTree tkRestoreOldGrab tkSaveGrabInfo \
tkScaleActivate tkScaleButton2Down tkScaleButtonDown \
tkScaleControlPress tkScaleDrag tkScaleEndDrag tkScaleIncrement \
tkScreenChanged tkScrollButton2Down tkScrollButtonDown \
tkScrollButtonUp tkScrollByPages tkScrollByUnits tkScrollDrag \
tkScrollEndDrag tkScrollSelect tkScrollStartDrag tkScrollToPos  \
tkScrollTopBottom tkTabToWindow tkTearOffMenu tkTextAutoScan \
tkTextButton1 tkTextClosestGap tkTextInsert tkTextKeyExtend \
tkTextKeySelect tkTextNextPara tkTextNextPos tkTextNextWord \
tkTextPaste tkTextPrevPara tkTextPrevPos tkTextResetAnchor \
tkTextScrollPages tkTextSelectTo tkTextSetCursor tkTextTranspose \
tkTextUpDownLine tkTraverseToMenu tkTraverseWithinMenu tk_bisque \
tk_chooseColor tk_dialog tk_focusFollowsMouse tk_focusNext \
tk_focusPrev tk_getOpenFile tk_getSaveFile tk_messageBox \
tk_optionMenu tk_popup tk_setPalette tk_textCopy tk_textCut \
tk_textPaste

keywords.*.tcl=$(keywordclass.tcl) $(keywordclass.tk) $(keywordclass.TkCommands)

keywords.*.itcl=$(keywordclass.tcl) $(keywordclass.tk) $(keywordclass.itcl) \
$(keywordclass.TkCommands)

statement.end.*.tcl=8  ;
statement.lookback.*.tcl=1
block.start.*.tcl=4 {
block.end.*.tcl=4 }

comment.block.tcl=#~
comment.box.start.tcl=##
comment.box.middle.tcl= #
comment.box.end.tcl= ##

style.tcl.0=fore:#808080
style.tcl.1=fore:#007F00,$(font.comment)
style.tcl.2=fore:#007F7F
style.tcl.3=fore:#7F007F,$(font.monospace)
style.tcl.4=fore:#7F007F,$(font.monospace)
style.tcl.5=fore:#00007F,bold
style.tcl.6=fore:#7F0000
style.tcl.7=fore:#7F0000
style.tcl.8=fore:#0000FF,bold
style.tcl.9=fore:#007F7F,bold
style.tcl.10=bold
style.tcl.11=
style.tcl.12=fore:#7F7F7F
style.tcl.13=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.tcl.34=fore:#0000FF,bold
style.tcl.35=fore:#FF0000,bold
braces.tcl.style=10

file.patterns.vb=*.vb;*.bas;*.frm;*.cls;*.ctl;*.pag;*.dsr;*.dob
file.patterns.wscript=*.vbs;*.dsm

filter.vb=VB (vb vbp vbs bas frm cls ctl pag dsr dob)|$(file.patterns.vb);$(file.patterns.wscript);*.vbp;*.vbg;*.mak;*.vbw|

lexer.$(file.patterns.vb)=vb
lexer.$(file.patterns.wscript)=vbscript

keywordclass.vb=and begin case call continue do each else elseif end erase \
error event exit false for function get gosub goto if implement in load loop lset \
me mid new next not nothing on or property raiseevent rem resume return rset \
select set stop sub then to true unload until wend while with withevents \
attribute alias as boolean byref byte byval const compare currency date declare dim double \
enum explicit friend global integer let lib long module object option optional \
preserve private property public redim single static string type variant

keywordclass.vbnet=addhandler addressof andalso alias and ansi as assembly auto boolean \
byref byte byval call case catch cbool cbyte cchar cdate cdec cdbl char cint class \
clng cobj const cshort csng cstr ctype date decimal declare default delegate dim do double \
each else elseif end enum erase error event exit false finally for friend function get \
gettype goto  handles if implements imports in inherits integer interface is let lib like long \
loop me mod module mustinherit mustoverride mybase myclass namespace new \
next not nothing notinheritable notoverridable object on option optional or \
orelse overloads overridable overrides paramarray preserve private property protected public \
raiseevent readonly redim rem removehandler resume return select set shadows \
shared short single static step stop string structure sub synclock then throw to true try \
typeof unicode until variant when while with withevents writeonly xor

keywords.$(file.patterns.vb)=$(keywordclass.vbnet)
keywords.$(file.patterns.wscript)=$(keywordclass.vb)

keywordclass.vbotherstatements=appactivate beep chdir chdrive close \
deletesetting filecopy get input kill line lock unlock lset mid mkdir name \
open print put randomize reset rmdir rset savepicture savesetting seek \
sendkeys setattr time unload width write

comment.block.vb='~

style.vb.0=fore:#000000,$(font.vbs)
style.vb.1=$(colour.code.comment.line),$(font.code.comment.line)
style.vb.2=$(colour.number)
style.vb.3=$(colour.keyword)
style.vb.4=$(colour.string)
style.vb.5=$(colour.preproc)
style.vb.6=$(colour.operator)
style.vb.7=
style.vb.8=$(colour.number)

style.vbscript.0=$(style.vb.0)
style.vbscript.1=$(style.vb.1)
style.vbscript.2=$(style.vb.2)
style.vbscript.3=$(style.vb.3)
style.vbscript.4=$(style.vb.4)
style.vbscript.5=$(style.vb.5)
style.vbscript.6=$(style.vb.6)
style.vbscript.7=$(style.vb.7)
style.vbscript.8=$(style.vb.8)

command.go.$(file.patterns.wscript)="$(FilePath)"
command.go.subsystem.$(file.patterns.wscript)=2

command.build.$(file.patterns.wscript)=cscript "$(FilePath)"
command.build.subsystem.$(file.patterns.wscript)=1

