# Define SciTE settings for C++, C, Java, IDL, JavaScript files.

filter.cpp=C/C++ (.c;.cc;.cpp;.cxx;.cs;.h;.hh;.hxx;.hpp;.dlg;.rc;.rc2;.mak)|\
*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;*.dlg;*.rc;*.rc2;*.mak;makefile|
filter.java=Java (.java)|*.java|
filter.js=Javascript (.js)|*.js|
filter.idl=IDL (.idl;.odl)|*.idl;*.odl|

file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx
file.patterns.cs=*.cs
file.patterns.rc=*.rc;*.rc2;*.dlg
file.patterns.idl=*.idl;*.odl

file.patterns.braces=$(file.patterns.cpp);$(file.patterns.idl);*.java;$(file.patterns.cs)

lexer.*.java=cpp
lexer.$(file.patterns.cpp)=cpp
lexer.$(file.patterns.rc)=cpp
lexer.$(file.patterns.idl)=cpp
lexer.$(file.patterns.cs)=cpp
lexer.*.js=cpp

keywordclass.cpp=asm auto bool break case catch char class const const_cast continue \
default delete do double dynamic_cast else enum explicit export extern false float for \
friend goto if inline int long mutable namespace new operator private protected public \
register reinterpret_cast return short signed sizeof static static_cast struct switch \
template this throw true try typedef typeid typename union unsigned using \
virtual void volatile wchar_t while
keywords.$(file.patterns.cpp)=$(keywordclass.cpp)

word.chars.cxx=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.cpp)=$(word.chars.cxx)
comment.cpp=//~
comment.block.cpp=//~
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/

statement.indent.$(file.patterns.cpp)=5 case catch class default do else for if \
private protected public struct try union while
statement.end.$(file.patterns.cpp)=10 ;
statement.lookback.$(file.patterns.cpp)=20
block.start.$(file.patterns.cpp)=10 {
block.end.$(file.patterns.cpp)=10 }
#styling.within.preprocessor=1
fold.comment=1

keywordclass.cs=abstract as base bool break byte case catch char checked class \
const continue decimal default delegate do double else enum \
event explicit extern false finally fixed float for foreach goto if \
implicit in int interface internal is lock long namespace new null \
object operator out override params private protected public \
readonly ref return sbyte sealed short sizeof stackalloc static \
string struct switch this throw true try typeof uint ulong \
unchecked unsafe ushort using virtual void while 
keywords.$(file.patterns.cs)=$(keywordclass.cs)
word.characters.$(file.patterns.cs)=$(word.chars.cxx)

keywordclass.rc=\
ACCELERATORS AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON \
BEGIN BITMAP BLOCK CAPTION CHARACTERISTICS CHECKBOX CLASS \
COMBOBOX CONTROL CURSOR CTEXT DEFPUSHBUTTON DIALOG DIALOGEX \
EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT \
MENU MENUEX MENUITEM MESSAGETABLE POPUP \
PUSHBUTTON RADIOBUTTON RCDATA RTEXT SCROLLBAR STATE3 \
STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO
keywords.$(file.patterns.rc)=$(keywordclass.rc)

keywordclass.idl=\
allocate appobject async auto_handle \
bindable boolean broadcast byte byte_count \
call_as callback char coclass code comm_status const context_handle control cpp_quote \
decode default defaultbind defaultvalue dispinterface displaybind dllname double dual \
enable_allocate encode endpoint entry enum error_status_t explicit_handle \
fault_status first_is float \
handle_t heap helpcontext helpfile helpstring hidden hyper \
id idempotent ignore iid_is immediatebind implicit_handle import \
importlib in include in_line int __int64 interface \
last_is lcid length_is library licensed local long \
max_is maybe message midl_user_allocate midl_user_free min_is module ms_union \
ncacn_at_dsp ncacn_dnet_nsp ncacn_http ncacn_ip_tcp \
ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np ncacn_spx \
ncacn_vns_spp ncadg_ip_udp ncadg_ipx ncadg_mq ncalrpc \
nocode nonextensible notify \
object odl oleautomation optimize optional out out_of_line \
pipe pointer_default propget propput propputref public ptr \
readonly ref represent_as requestedit restricted retval \
shape short signed size_is small source string struct \
switch switch_is switch_type \
transmit_as typedef \
union unique unsigned user_marshal usesgetlasterror uuid \
v1_enum vararg version void wchar_t wire_marshal
keywordclass.msidl=handle
keywordclass.xpidl=attribute native noscript scriptable shared wstring inout
keywords.$(file.patterns.idl)=$(keywordclass.idl) $(keywordclass.xpidl)

keywordclass.java=abstract boolean break byte case catch char class const \
continue default do double else extends final finally float for future \
generic goto if implements import inner instanceof int interface long \
native new null operator outer package private protected public rest \
return short static super switch synchronized this throw throws \
transient try var void volatile while
keywords.*.java=$(keywordclass.java)

keywordclass.javascript=abstract boolean break byte case catch char class \
const continue debugger default delete do double else enum export extends \
final finally float for function goto if implements import in instanceof \
int interface long native new package private protected public \
return short static super switch synchronized this throw throws \
transient try typeof var void volatile while with
keywords.*.js=$(keywordclass.javascript)

# C++ styles
# Default
#style.cpp.32=font:Georgia,size:10
# White space
style.cpp.0=fore:#808080
# Comment
style.cpp.1=fore:#007F00,$(font.comment)
# Line Comment
style.cpp.2=fore:#007F00,$(font.comment)
# Doc comment
style.cpp.3=fore:#3F703F,$(font.comment)
# Number
style.cpp.4=fore:#007F7F
# Keyword
style.cpp.5=fore:#00007F,bold
# Double quoted string
style.cpp.6=fore:#7F007F,$(font.monospace)
# Single quoted string
style.cpp.7=fore:#7F007F,$(font.monospace)
# UUIDs (only in IDL)
style.cpp.8=fore:#804080
# Preprocessor
style.cpp.9=fore:#7F7F00
# Operators
style.cpp.10=bold
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.cpp.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.cpp.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line
style.cpp.15=fore:#3F703F,$(font.comment)
# Braces are only matched in operator style
braces.cpp.style=10

cc=g++ -pedantic -Os -fno-exceptions -fvtable-thunks -c $(FileNameExt) -o $(FileName).o

command.compile.*.c=$(cc)
command.build.*.c=make
command.go.*.c=$(FileName)
# To make the Go command both compile (if needed) and execute, use this setting:
#command.go.needs.*.c=g++ $(FileNameExt) -o $(FileName)

command.compile.*.cc=$(cc)
command.build.*.cc=make
command.go.*.cc=$(FileName)

command.compile.*.cpp=$(cc)
command.build.*.cpp=make
command.go.*.cpp=$(FileName)

command.compile.*.cxx=$(cc)
command.build.*.cxx=make
command.go.*.cxx=$(FileName)

command.build.*.h=make

command.name.0.*.cxx=Indent
command.0.*.cxx=astyle -tapO $(FileNameExt)
command.is.filter.0.*.cxx=1

command.name.1.*.cxx=Lint
command.1.*.cxx=g++ -W -Wall -Wshadow -Wwrite-strings -Wold-style-cast \
	-Woverloaded-virtual  -pedantic -Os -fno-exceptions -fvtable-thunks -c $(FileNameExt)

command.name.2.*.cxx=Execute Selection
command.2.*.cxx=$(CurrentSelection)

if PLAT_WIN
	command.compile.*.rc=windres $(FileNameExt) $(FileName).o
	command.build.*.rc=make
	command.build.*.h=make
	command.help.$(file.patterns.cpp)=$(CurrentWord)!G:\Program Files\Microsoft Visual Studio\MSDN98\98VSa\1033\MSDNVS6A.COL
	command.help.subsystem.$(file.patterns.cpp)=4
	
if PLAT_GTK
	command.help.$(file.patterns.cpp)=man $(CurrentWord) | col -b
	
# C# is only available on Windows
if PLAT_WIN
	command.build.*.cs=csc /t:winexe $(FileNameExt) /r:system.winforms.dll,system.dll,microsoft.win32.interop.dll,system.drawing.dll
	command.go.*.cs=$(FileName)
	command.go.subsystem.*.cs=1

command.compile.*.java=javac $(FileNameExt)
command.build.*.java=javac *.java
command.go.*.java=java $(FileName)

